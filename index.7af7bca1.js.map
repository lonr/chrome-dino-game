{"mappings":"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","sources":["src/offline.js"],"sourcesContent":["// https://source.chromium.org/chromium/chromium/src/+/main:components/neterror/resources/offline.js\n\n// Copyright (c) 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * T-Rex runner.\n * @param {string} outerContainerId Outer containing element id.\n * @param {!Object=} opt_config\n * @constructor\n * @implements {EventListener}\n * @export\n */\nfunction Runner(outerContainerId, opt_config) {\n  // Singleton\n  if (Runner.instance_) {\n    return Runner.instance_;\n  }\n  Runner.instance_ = this;\n\n  this.outerContainerEl = document.querySelector(outerContainerId);\n  this.containerEl = null;\n  this.snackbarEl = null;\n  // A div to intercept touch events. Only set while (playing && useTouch).\n  this.touchController = null;\n\n  this.config = opt_config || Object.assign(Runner.config, Runner.normalConfig);\n  // Logical dimensions of the container.\n  this.dimensions = Runner.defaultDimensions;\n\n  this.gameType = null;\n  Runner.spriteDefinition = Runner.spriteDefinitionByType['original'];\n\n  this.altGameImageSprite = null;\n  this.altGameModeActive = false;\n  this.altGameModeFlashTimer = null;\n  this.fadeInTimer = 0;\n\n  this.canvas = null;\n  this.canvasCtx = null;\n\n  this.tRex = null;\n\n  this.distanceMeter = null;\n  this.distanceRan = 0;\n\n  this.highestScore = 0;\n  this.syncHighestScore = false;\n\n  this.time = 0;\n  this.runningTime = 0;\n  this.msPerFrame = 1000 / FPS;\n  this.currentSpeed = this.config.SPEED;\n  Runner.slowDown = false;\n\n  this.obstacles = [];\n\n  this.activated = false; // Whether the easter egg has been activated.\n  this.playing = false; // Whether the game is currently in play state.\n  this.crashed = false;\n  this.paused = false;\n  this.inverted = false;\n  this.invertTimer = 0;\n  this.resizeTimerId_ = null;\n\n  this.playCount = 0;\n\n  // Sound FX.\n  this.audioBuffer = null;\n\n  /** @type {Object} */\n  this.soundFx = {};\n  this.generatedSoundFx = null;\n\n  // Global web audio context for playing sounds.\n  this.audioContext = null;\n\n  // Images.\n  this.images = {};\n  this.imagesLoaded = 0;\n\n  // Gamepad state.\n  this.pollingGamepads = false;\n  this.gamepadIndex = undefined;\n  this.previousGamepad = null;\n\n  if (this.isDisabled()) {\n    this.setupDisabledRunner();\n  } else {\n    if (Runner.isAltGameModeEnabled()) {\n      this.initAltGameType();\n      Runner.gameType = this.gameType;\n    }\n    this.loadImages();\n\n    // https://source.chromium.org/chromium/chromium/src/+/main:chrome/renderer/net/net_error_helper.cc\n    window['initializeEasterEggHighScore'] = this.initializeHighScore.bind(this);\n  }\n}\n\n/**\n * Default game width.\n * @const\n */\nconst DEFAULT_WIDTH = 600;\n\n/**\n * Frames per second.\n * @const\n */\nconst FPS = 60;\n\n/** @const */\nconst IS_HIDPI = window.devicePixelRatio > 1;\n\n/** @const */\nconst IS_IOS = /CriOS/.test(window.navigator.userAgent);\n\n/** @const */\nconst IS_MOBILE = /Android/.test(window.navigator.userAgent) || IS_IOS;\n\n/** @const */\nconst IS_RTL = document.querySelector('html').dir == 'rtl';\n\n/** @const */\n// const ARCADE_MODE_URL = \"chrome://dino/\";\n// modified: to avoid confusion. Also changed the <title> in index.html\nconst ARCADE_MODE_URL = 'Chrome Dino Game';\n\n/** @const */\nconst RESOURCE_POSTFIX = 'offline-resources-';\n\n/** @const */\nconst A11Y_STRINGS = {\n  ariaLabel: 'dinoGameA11yAriaLabel',\n  description: 'dinoGameA11yDescription',\n  gameOver: 'dinoGameA11yGameOver',\n  highScore: 'dinoGameA11yHighScore',\n  jump: 'dinoGameA11yJump',\n  started: 'dinoGameA11yStartGame',\n  speedLabel: 'dinoGameA11ySpeedToggle',\n};\n\n/**\n * Default game configuration.\n * Shared config for all  versions of the game. Additional parameters are\n * defined in Runner.normalConfig and Runner.slowConfig.\n */\nRunner.config = {\n  AUDIOCUE_PROXIMITY_THRESHOLD: 190,\n  AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 250,\n  BG_CLOUD_SPEED: 0.2,\n  BOTTOM_PAD: 10,\n  // Scroll Y threshold at which the game can be activated.\n  CANVAS_IN_VIEW_OFFSET: -10,\n  CLEAR_TIME: 3000,\n  CLOUD_FREQUENCY: 0.5,\n  FADE_DURATION: 1,\n  FLASH_DURATION: 1000,\n  GAMEOVER_CLEAR_TIME: 1200,\n  INITIAL_JUMP_VELOCITY: 12,\n  INVERT_FADE_DURATION: 12000,\n  MAX_BLINK_COUNT: 3,\n  MAX_CLOUDS: 6,\n  MAX_OBSTACLE_LENGTH: 3,\n  MAX_OBSTACLE_DUPLICATION: 2,\n  RESOURCE_TEMPLATE_ID: 'audio-resources',\n  SPEED: 6,\n  SPEED_DROP_COEFFICIENT: 3,\n  ARCADE_MODE_INITIAL_TOP_POSITION: 35,\n  ARCADE_MODE_TOP_POSITION_PERCENT: 0.1,\n};\n\nRunner.normalConfig = {\n  ACCELERATION: 0.001,\n  AUDIOCUE_PROXIMITY_THRESHOLD: 190,\n  AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 250,\n  GAP_COEFFICIENT: 0.6,\n  INVERT_DISTANCE: 700,\n  MAX_SPEED: 13,\n  MOBILE_SPEED_COEFFICIENT: 1.2,\n  SPEED: 6,\n};\n\nRunner.slowConfig = {\n  ACCELERATION: 0.0005,\n  AUDIOCUE_PROXIMITY_THRESHOLD: 170,\n  AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 220,\n  GAP_COEFFICIENT: 0.3,\n  INVERT_DISTANCE: 350,\n  MAX_SPEED: 9,\n  MOBILE_SPEED_COEFFICIENT: 1.5,\n  SPEED: 4.2,\n};\n\n/**\n * Default dimensions.\n */\nRunner.defaultDimensions = {\n  WIDTH: DEFAULT_WIDTH,\n  HEIGHT: 150,\n};\n\n/**\n * CSS class names.\n * @enum {string}\n */\nRunner.classes = {\n  ARCADE_MODE: 'arcade-mode',\n  CANVAS: 'runner-canvas',\n  CONTAINER: 'runner-container',\n  CRASHED: 'crashed',\n  ICON: 'icon-offline',\n  INVERTED: 'inverted',\n  SNACKBAR: 'snackbar',\n  SNACKBAR_SHOW: 'snackbar-show',\n  TOUCH_CONTROLLER: 'controller',\n};\n\n/**\n * Sound FX. Reference to the ID of the audio tag on interstitial page.\n * @enum {string}\n */\nRunner.sounds = {\n  BUTTON_PRESS: 'offline-sound-press',\n  HIT: 'offline-sound-hit',\n  SCORE: 'offline-sound-reached',\n};\n\n/**\n * Key code mapping.\n * @enum {Object}\n */\nRunner.keycodes = {\n  JUMP: { 38: 1, 32: 1 }, // Up, spacebar\n  DUCK: { 40: 1 }, // Down\n  RESTART: { 13: 1 }, // Enter\n};\n\n/**\n * Runner event names.\n * @enum {string}\n */\nRunner.events = {\n  ANIM_END: 'webkitAnimationEnd',\n  CLICK: 'click',\n  KEYDOWN: 'keydown',\n  KEYUP: 'keyup',\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  RESIZE: 'resize',\n  TOUCHEND: 'touchend',\n  TOUCHSTART: 'touchstart',\n  VISIBILITY: 'visibilitychange',\n  BLUR: 'blur',\n  FOCUS: 'focus',\n  LOAD: 'load',\n  GAMEPADCONNECTED: 'gamepadconnected',\n};\n\nRunner.prototype = {\n  /**\n   * Initialize alternative game type.\n   */\n  initAltGameType() {\n    if (GAME_TYPE.length > 0) {\n      this.gameType =\n        loadTimeData && loadTimeData.valueExists('altGameType')\n          ? GAME_TYPE[parseInt(loadTimeData.getValue('altGameType'), 10) - 1]\n          : '';\n    }\n  },\n\n  /**\n   * Whether the easter egg has been disabled. CrOS enterprise enrolled devices.\n   * @return {boolean}\n   */\n  isDisabled() {\n    return loadTimeData && loadTimeData.valueExists('disabledEasterEgg');\n  },\n\n  /**\n   * For disabled instances, set up a snackbar with the disabled message.\n   */\n  setupDisabledRunner() {\n    this.containerEl = document.createElement('div');\n    this.containerEl.className = Runner.classes.SNACKBAR;\n    this.containerEl.textContent = loadTimeData.getValue('disabledEasterEgg');\n    this.outerContainerEl.appendChild(this.containerEl);\n\n    // Show notification when the activation key is pressed.\n    document.addEventListener(\n      Runner.events.KEYDOWN,\n      function (e) {\n        if (Runner.keycodes.JUMP[e.keyCode]) {\n          this.containerEl.classList.add(Runner.classes.SNACKBAR_SHOW);\n          document.querySelector('.icon').classList.add('icon-disabled');\n        }\n      }.bind(this)\n    );\n  },\n\n  /**\n   * Setting individual settings for debugging.\n   * @param {string} setting\n   * @param {number|string} value\n   */\n  updateConfigSetting(setting, value) {\n    if (setting in this.config && value !== undefined) {\n      this.config[setting] = value;\n\n      switch (setting) {\n        case 'GRAVITY':\n        case 'MIN_JUMP_HEIGHT':\n        case 'SPEED_DROP_COEFFICIENT':\n          this.tRex.config[setting] = value;\n          break;\n        case 'INITIAL_JUMP_VELOCITY':\n          this.tRex.setJumpVelocity(value);\n          break;\n        case 'SPEED':\n          this.setSpeed(/** @type {number} */ (value));\n          break;\n      }\n    }\n  },\n\n  /**\n   * Creates an on page image element from the base 64 encoded string source.\n   * @param {string} resourceName Name in data object,\n   * @return {HTMLImageElement} The created element.\n   */\n  createImageElement(resourceName) {\n    const imgSrc =\n      loadTimeData && loadTimeData.valueExists(resourceName)\n        ? loadTimeData.getString(resourceName)\n        : null;\n\n    if (imgSrc) {\n      const el = /** @type {HTMLImageElement} */ (document.createElement('img'));\n      el.id = resourceName;\n      el.src = imgSrc;\n      document.getElementById('offline-resources').appendChild(el);\n      return el;\n    }\n    return null;\n  },\n\n  /**\n   * Cache the appropriate image sprite from the page and get the sprite sheet\n   * definition.\n   */\n  loadImages() {\n    let scale = '1x';\n    this.spriteDef = Runner.spriteDefinition.LDPI;\n    if (IS_HIDPI) {\n      scale = '2x';\n      this.spriteDef = Runner.spriteDefinition.HDPI;\n    }\n\n    Runner.imageSprite =\n      /** @type {HTMLImageElement} */\n      (document.getElementById(RESOURCE_POSTFIX + scale));\n\n    if (this.gameType) {\n      Runner.altGameImageSprite =\n        /** @type {HTMLImageElement} */\n        (this.createImageElement('altGameSpecificImage' + scale));\n      Runner.altCommonImageSprite =\n        /** @type {HTMLImageElement} */\n        (this.createImageElement('altGameCommonImage' + scale));\n    }\n    Runner.origImageSprite = Runner.imageSprite;\n\n    // Disable the alt game mode if the sprites can't be loaded.\n    if (!Runner.altGameImageSprite || !Runner.altCommonImageSprite) {\n      Runner.isAltGameModeEnabled = () => false;\n      this.altGameModeActive = false;\n    }\n\n    if (Runner.imageSprite.complete) {\n      this.init();\n    } else {\n      // If the images are not yet loaded, add a listener.\n      Runner.imageSprite.addEventListener(Runner.events.LOAD, this.init.bind(this));\n    }\n  },\n\n  /**\n   * Load and decode base 64 encoded sounds.\n   */\n  loadSounds() {\n    if (!IS_IOS) {\n      this.audioContext = new AudioContext();\n\n      const resourceTemplate = document.getElementById(this.config.RESOURCE_TEMPLATE_ID).content;\n\n      for (const sound in Runner.sounds) {\n        let soundSrc = resourceTemplate.getElementById(Runner.sounds[sound]).src;\n        soundSrc = soundSrc.substr(soundSrc.indexOf(',') + 1);\n        const buffer = decodeBase64ToArrayBuffer(soundSrc);\n\n        // Async, so no guarantee of order in array.\n        this.audioContext.decodeAudioData(\n          buffer,\n          function (index, audioData) {\n            this.soundFx[index] = audioData;\n          }.bind(this, sound)\n        );\n      }\n    }\n  },\n\n  /**\n   * Sets the game speed. Adjust the speed accordingly if on a smaller screen.\n   * @param {number=} opt_speed\n   */\n  setSpeed(opt_speed) {\n    const speed = opt_speed || this.currentSpeed;\n\n    // Reduce the speed on smaller mobile screens.\n    if (this.dimensions.WIDTH < DEFAULT_WIDTH) {\n      const mobileSpeed = Runner.slowDown\n        ? speed\n        : ((speed * this.dimensions.WIDTH) / DEFAULT_WIDTH) * this.config.MOBILE_SPEED_COEFFICIENT;\n      this.currentSpeed = mobileSpeed > speed ? speed : mobileSpeed;\n    } else if (opt_speed) {\n      this.currentSpeed = opt_speed;\n    }\n  },\n\n  /**\n   * Game initialiser.\n   */\n  init() {\n    // Hide the static icon.\n    document.querySelector('.' + Runner.classes.ICON).style.visibility = 'hidden';\n\n    this.adjustDimensions();\n    this.setSpeed();\n\n    const ariaLabel = getA11yString(A11Y_STRINGS.ariaLabel);\n    this.containerEl = document.createElement('div');\n    this.containerEl.setAttribute('role', IS_MOBILE ? 'button' : 'application');\n    this.containerEl.setAttribute('tabindex', '0');\n    this.containerEl.setAttribute('title', ariaLabel);\n\n    this.containerEl.className = Runner.classes.CONTAINER;\n\n    // Player canvas container.\n    this.canvas = createCanvas(this.containerEl, this.dimensions.WIDTH, this.dimensions.HEIGHT);\n\n    // Live region for game status updates.\n    this.a11yStatusEl = document.createElement('span');\n    this.a11yStatusEl.className = 'offline-runner-live-region';\n    this.a11yStatusEl.setAttribute('aria-live', 'assertive');\n    this.a11yStatusEl.textContent = '';\n    Runner.a11yStatusEl = this.a11yStatusEl;\n\n    // Add checkbox to slow down the game.\n    this.slowSpeedCheckboxLabel = document.createElement('label');\n    this.slowSpeedCheckboxLabel.className = 'slow-speed-option hidden';\n    this.slowSpeedCheckboxLabel.textContent = getA11yString(A11Y_STRINGS.speedLabel);\n\n    this.slowSpeedCheckbox = document.createElement('input');\n    this.slowSpeedCheckbox.setAttribute('type', 'checkbox');\n    this.slowSpeedCheckbox.setAttribute('title', getA11yString(A11Y_STRINGS.speedLabel));\n    this.slowSpeedCheckbox.setAttribute('tabindex', '0');\n    this.slowSpeedCheckbox.setAttribute('checked', 'checked');\n\n    this.slowSpeedToggleEl = document.createElement('span');\n    this.slowSpeedToggleEl.className = 'slow-speed-toggle';\n\n    this.slowSpeedCheckboxLabel.appendChild(this.slowSpeedCheckbox);\n    this.slowSpeedCheckboxLabel.appendChild(this.slowSpeedToggleEl);\n\n    if (IS_IOS) {\n      this.outerContainerEl.appendChild(this.a11yStatusEl);\n    } else {\n      this.containerEl.appendChild(this.a11yStatusEl);\n    }\n\n    announcePhrase(getA11yString(A11Y_STRINGS.description));\n\n    this.generatedSoundFx = new GeneratedSoundFx();\n\n    this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\n    this.canvasCtx.fillStyle = '#f7f7f7';\n    this.canvasCtx.fill();\n    Runner.updateCanvasScaling(this.canvas);\n\n    // Horizon contains clouds, obstacles and the ground.\n    this.horizon = new Horizon(\n      this.canvas,\n      this.spriteDef,\n      this.dimensions,\n      this.config.GAP_COEFFICIENT\n    );\n\n    // Distance meter\n    this.distanceMeter = new DistanceMeter(\n      this.canvas,\n      this.spriteDef.TEXT_SPRITE,\n      this.dimensions.WIDTH\n    );\n\n    // Draw t-rex\n    this.tRex = new Trex(this.canvas, this.spriteDef.TREX);\n\n    this.outerContainerEl.appendChild(this.containerEl);\n    this.outerContainerEl.appendChild(this.slowSpeedCheckboxLabel);\n\n    this.startListening();\n    this.update();\n\n    window.addEventListener(Runner.events.RESIZE, this.debounceResize.bind(this));\n\n    // Handle dark mode\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    this.isDarkMode = darkModeMediaQuery && darkModeMediaQuery.matches;\n    darkModeMediaQuery.addListener((e) => {\n      this.isDarkMode = e.matches;\n    });\n  },\n\n  /**\n   * Create the touch controller. A div that covers whole screen.\n   */\n  createTouchController() {\n    this.touchController = document.createElement('div');\n    this.touchController.className = Runner.classes.TOUCH_CONTROLLER;\n    this.touchController.addEventListener(Runner.events.TOUCHSTART, this);\n    this.touchController.addEventListener(Runner.events.TOUCHEND, this);\n    this.outerContainerEl.appendChild(this.touchController);\n  },\n\n  /**\n   * Debounce the resize event.\n   */\n  debounceResize() {\n    if (!this.resizeTimerId_) {\n      this.resizeTimerId_ = setInterval(this.adjustDimensions.bind(this), 250);\n    }\n  },\n\n  /**\n   * Adjust game space dimensions on resize.\n   */\n  adjustDimensions() {\n    clearInterval(this.resizeTimerId_);\n    this.resizeTimerId_ = null;\n\n    const boxStyles = window.getComputedStyle(this.outerContainerEl);\n    const padding = Number(boxStyles.paddingLeft.substr(0, boxStyles.paddingLeft.length - 2));\n\n    this.dimensions.WIDTH = this.outerContainerEl.offsetWidth - padding * 2;\n    if (this.isArcadeMode()) {\n      this.dimensions.WIDTH = Math.min(DEFAULT_WIDTH, this.dimensions.WIDTH);\n      if (this.activated) {\n        this.setArcadeModeContainerScale();\n      }\n    }\n\n    // Redraw the elements back onto the canvas.\n    if (this.canvas) {\n      this.canvas.width = this.dimensions.WIDTH;\n      this.canvas.height = this.dimensions.HEIGHT;\n\n      Runner.updateCanvasScaling(this.canvas);\n\n      this.distanceMeter.calcXPos(this.dimensions.WIDTH);\n      this.clearCanvas();\n      this.horizon.update(0, 0, true);\n      this.tRex.update(0);\n\n      // Outer container and distance meter.\n      if (this.playing || this.crashed || this.paused) {\n        this.containerEl.style.width = this.dimensions.WIDTH + 'px';\n        this.containerEl.style.height = this.dimensions.HEIGHT + 'px';\n        this.distanceMeter.update(0, Math.ceil(this.distanceRan));\n        this.stop();\n      } else {\n        this.tRex.draw(0, 0);\n      }\n\n      // Game over panel.\n      if (this.crashed && this.gameOverPanel) {\n        this.gameOverPanel.updateDimensions(this.dimensions.WIDTH);\n        this.gameOverPanel.draw(this.altGameModeActive, this.tRex);\n      }\n    }\n  },\n\n  /**\n   * Play the game intro.\n   * Canvas container width expands out to the full width.\n   */\n  playIntro() {\n    if (!this.activated && !this.crashed) {\n      this.playingIntro = true;\n      this.tRex.playingIntro = true;\n\n      // CSS animation definition.\n      const keyframes =\n        '@-webkit-keyframes intro { ' +\n        'from { width:' +\n        Trex.config.WIDTH +\n        'px }' +\n        'to { width: ' +\n        this.dimensions.WIDTH +\n        'px }' +\n        '}';\n      document.styleSheets[0].insertRule(keyframes, 0);\n\n      this.containerEl.addEventListener(Runner.events.ANIM_END, this.startGame.bind(this));\n\n      this.containerEl.style.webkitAnimation = 'intro .4s ease-out 1 both';\n      this.containerEl.style.width = this.dimensions.WIDTH + 'px';\n\n      this.setPlayStatus(true);\n      this.activated = true;\n    } else if (this.crashed) {\n      this.restart();\n    }\n  },\n\n  /**\n   * Update the game status to started.\n   */\n  startGame() {\n    if (this.isArcadeMode()) {\n      this.setArcadeMode();\n    }\n    this.toggleSpeed();\n    this.runningTime = 0;\n    this.playingIntro = false;\n    this.tRex.playingIntro = false;\n    this.containerEl.style.webkitAnimation = '';\n    this.playCount++;\n    this.generatedSoundFx.background();\n    announcePhrase(getA11yString(A11Y_STRINGS.started));\n\n    if (Runner.audioCues) {\n      this.containerEl.setAttribute('title', getA11yString(A11Y_STRINGS.jump));\n    }\n\n    // Handle tabbing off the page. Pause the current game.\n    document.addEventListener(Runner.events.VISIBILITY, this.onVisibilityChange.bind(this));\n\n    window.addEventListener(Runner.events.BLUR, this.onVisibilityChange.bind(this));\n\n    window.addEventListener(Runner.events.FOCUS, this.onVisibilityChange.bind(this));\n  },\n\n  clearCanvas() {\n    this.canvasCtx.clearRect(0, 0, this.dimensions.WIDTH, this.dimensions.HEIGHT);\n  },\n\n  /**\n   * Checks whether the canvas area is in the viewport of the browser\n   * through the current scroll position.\n   * @return boolean.\n   */\n  isCanvasInView() {\n    return this.containerEl.getBoundingClientRect().top > Runner.config.CANVAS_IN_VIEW_OFFSET;\n  },\n\n  /**\n   * Enable the alt game mode. Switching out the sprites.\n   */\n  enableAltGameMode() {\n    Runner.imageSprite = Runner.altGameImageSprite;\n    Runner.spriteDefinition = Runner.spriteDefinitionByType[Runner.gameType];\n\n    if (IS_HIDPI) {\n      this.spriteDef = Runner.spriteDefinition.HDPI;\n    } else {\n      this.spriteDef = Runner.spriteDefinition.LDPI;\n    }\n\n    this.altGameModeActive = true;\n    this.tRex.enableAltGameMode(this.spriteDef.TREX);\n    this.horizon.enableAltGameMode(this.spriteDef);\n    this.generatedSoundFx.background();\n  },\n\n  /**\n   * Update the game frame and schedules the next one.\n   */\n  update() {\n    this.updatePending = false;\n\n    const now = getTimeStamp();\n    let deltaTime = now - (this.time || now);\n\n    // Flashing when switching game modes.\n    if (this.altGameModeFlashTimer < 0 || this.altGameModeFlashTimer === 0) {\n      this.altGameModeFlashTimer = null;\n      this.tRex.setFlashing(false);\n      this.enableAltGameMode();\n    } else if (this.altGameModeFlashTimer > 0) {\n      this.altGameModeFlashTimer -= deltaTime;\n      this.tRex.update(deltaTime);\n      deltaTime = 0;\n    }\n\n    this.time = now;\n\n    if (this.playing) {\n      this.clearCanvas();\n\n      // Additional fade in - Prevents jump when switching sprites\n      if (this.altGameModeActive && this.fadeInTimer <= this.config.FADE_DURATION) {\n        this.fadeInTimer += deltaTime / 1000;\n        this.canvasCtx.globalAlpha = this.fadeInTimer;\n      } else {\n        this.canvasCtx.globalAlpha = 1;\n      }\n\n      if (this.tRex.jumping) {\n        this.tRex.updateJump(deltaTime);\n      }\n\n      this.runningTime += deltaTime;\n      const hasObstacles = this.runningTime > this.config.CLEAR_TIME;\n\n      // First jump triggers the intro.\n      if (this.tRex.jumpCount === 1 && !this.playingIntro) {\n        this.playIntro();\n      }\n\n      // The horizon doesn't move until the intro is over.\n      if (this.playingIntro) {\n        this.horizon.update(0, this.currentSpeed, hasObstacles);\n      } else if (!this.crashed) {\n        const showNightMode = this.isDarkMode ^ this.inverted;\n        deltaTime = !this.activated ? 0 : deltaTime;\n        this.horizon.update(deltaTime, this.currentSpeed, hasObstacles, showNightMode);\n      }\n\n      // Check for collisions.\n      let collision = hasObstacles && checkForCollision(this.horizon.obstacles[0], this.tRex);\n\n      // For a11y, audio cues.\n      if (Runner.audioCues && hasObstacles) {\n        const jumpObstacle = this.horizon.obstacles[0].typeConfig.type != 'COLLECTABLE';\n\n        if (!this.horizon.obstacles[0].jumpAlerted) {\n          const threshold = Runner.isMobileMouseInput\n            ? Runner.config.AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y\n            : Runner.config.AUDIOCUE_PROXIMITY_THRESHOLD;\n          const adjProximityThreshold =\n            threshold + threshold * Math.log10(this.currentSpeed / Runner.config.SPEED);\n\n          if (this.horizon.obstacles[0].xPos < adjProximityThreshold) {\n            if (jumpObstacle) {\n              this.generatedSoundFx.jump();\n            }\n            this.horizon.obstacles[0].jumpAlerted = true;\n          }\n        }\n      }\n\n      // Activated alt game mode.\n      if (\n        Runner.isAltGameModeEnabled() &&\n        collision &&\n        this.horizon.obstacles[0].typeConfig.type == 'COLLECTABLE'\n      ) {\n        this.horizon.removeFirstObstacle();\n        this.tRex.setFlashing(true);\n        collision = false;\n        this.altGameModeFlashTimer = this.config.FLASH_DURATION;\n        this.runningTime = 0;\n        this.generatedSoundFx.collect();\n      }\n\n      if (!collision) {\n        this.distanceRan += (this.currentSpeed * deltaTime) / this.msPerFrame;\n\n        if (this.currentSpeed < this.config.MAX_SPEED) {\n          this.currentSpeed += this.config.ACCELERATION;\n        }\n      } else {\n        this.gameOver();\n      }\n\n      const playAchievementSound = this.distanceMeter.update(\n        deltaTime,\n        Math.ceil(this.distanceRan)\n      );\n\n      if (!Runner.audioCues && playAchievementSound) {\n        this.playSound(this.soundFx.SCORE);\n      }\n\n      // Night mode.\n      if (!Runner.isAltGameModeEnabled()) {\n        if (this.invertTimer > this.config.INVERT_FADE_DURATION) {\n          this.invertTimer = 0;\n          this.invertTrigger = false;\n          this.invert(false);\n        } else if (this.invertTimer) {\n          this.invertTimer += deltaTime;\n        } else {\n          const actualDistance = this.distanceMeter.getActualDistance(Math.ceil(this.distanceRan));\n\n          if (actualDistance > 0) {\n            this.invertTrigger = !(actualDistance % this.config.INVERT_DISTANCE);\n\n            if (this.invertTrigger && this.invertTimer === 0) {\n              this.invertTimer += deltaTime;\n              this.invert(false);\n            }\n          }\n        }\n      }\n    }\n\n    if (this.playing || (!this.activated && this.tRex.blinkCount < Runner.config.MAX_BLINK_COUNT)) {\n      this.tRex.update(deltaTime);\n      this.scheduleNextUpdate();\n    }\n  },\n\n  /**\n   * Event handler.\n   * @param {Event} e\n   */\n  handleEvent(e) {\n    return function (evtType, events) {\n      switch (evtType) {\n        case events.KEYDOWN:\n        case events.TOUCHSTART:\n        case events.POINTERDOWN:\n          this.onKeyDown(e);\n          break;\n        case events.KEYUP:\n        case events.TOUCHEND:\n        case events.POINTERUP:\n          this.onKeyUp(e);\n          break;\n        case events.GAMEPADCONNECTED:\n          this.onGamepadConnected(e);\n          break;\n      }\n    }.bind(this)(e.type, Runner.events);\n  },\n\n  /**\n   * Initialize audio cues if activated by focus on the canvas element.\n   * @param {Event} e\n   */\n  handleCanvasKeyPress(e) {\n    if (!this.activated && !Runner.audioCues) {\n      this.toggleSpeed();\n      Runner.audioCues = true;\n      this.generatedSoundFx.init();\n      Runner.generatedSoundFx = this.generatedSoundFx;\n      Runner.config.CLEAR_TIME *= 1.2;\n    } else if (e.keyCode && Runner.keycodes.JUMP[e.keyCode]) {\n      this.onKeyDown(e);\n    }\n  },\n\n  /**\n   * Prevent space key press from scrolling.\n   * @param {Event} e\n   */\n  preventScrolling(e) {\n    if (e.keyCode === 32) {\n      e.preventDefault();\n    }\n  },\n\n  /**\n   * Toggle speed setting if toggle is shown.\n   */\n  toggleSpeed() {\n    if (Runner.audioCues) {\n      const speedChange = Runner.slowDown != this.slowSpeedCheckbox.checked;\n\n      if (speedChange) {\n        Runner.slowDown = this.slowSpeedCheckbox.checked;\n        const updatedConfig = Runner.slowDown ? Runner.slowConfig : Runner.normalConfig;\n\n        Runner.config = Object.assign(Runner.config, updatedConfig);\n        this.currentSpeed = updatedConfig.SPEED;\n        this.tRex.enableSlowConfig();\n        this.horizon.adjustObstacleSpeed();\n      }\n      if (this.playing) {\n        this.disableSpeedToggle(true);\n      }\n    }\n  },\n\n  /**\n   * Show the speed toggle.\n   * From focus event or when audio cues are activated.\n   * @param {Event=} e\n   */\n  showSpeedToggle(e) {\n    const isFocusEvent = e && e.type == 'focus';\n    if (Runner.audioCues || isFocusEvent) {\n      this.slowSpeedCheckboxLabel.classList.toggle(\n        HIDDEN_CLASS,\n        isFocusEvent ? false : !this.crashed\n      );\n    }\n  },\n\n  /**\n   * Disable the speed toggle.\n   * @param {boolean} disable\n   */\n  disableSpeedToggle(disable) {\n    if (disable) {\n      this.slowSpeedCheckbox.setAttribute('disabled', 'disabled');\n    } else {\n      this.slowSpeedCheckbox.removeAttribute('disabled');\n    }\n  },\n\n  /**\n   * Bind relevant key / mouse / touch listeners.\n   */\n  startListening() {\n    // A11y keyboard / screen reader activation.\n    this.containerEl.addEventListener(Runner.events.KEYDOWN, this.handleCanvasKeyPress.bind(this));\n    if (!IS_MOBILE) {\n      this.containerEl.addEventListener(Runner.events.FOCUS, this.showSpeedToggle.bind(this));\n    }\n    this.canvas.addEventListener(Runner.events.KEYDOWN, this.preventScrolling.bind(this));\n    this.canvas.addEventListener(Runner.events.KEYUP, this.preventScrolling.bind(this));\n\n    // Keys.\n    document.addEventListener(Runner.events.KEYDOWN, this);\n    document.addEventListener(Runner.events.KEYUP, this);\n\n    // Touch / pointer.\n    this.containerEl.addEventListener(Runner.events.TOUCHSTART, this);\n    document.addEventListener(Runner.events.POINTERDOWN, this);\n    document.addEventListener(Runner.events.POINTERUP, this);\n\n    if (this.isArcadeMode()) {\n      // Gamepad\n      window.addEventListener(Runner.events.GAMEPADCONNECTED, this);\n    }\n  },\n\n  /**\n   * Remove all listeners.\n   */\n  stopListening() {\n    document.removeEventListener(Runner.events.KEYDOWN, this);\n    document.removeEventListener(Runner.events.KEYUP, this);\n\n    if (this.touchController) {\n      this.touchController.removeEventListener(Runner.events.TOUCHSTART, this);\n      this.touchController.removeEventListener(Runner.events.TOUCHEND, this);\n    }\n\n    this.containerEl.removeEventListener(Runner.events.TOUCHSTART, this);\n    document.removeEventListener(Runner.events.POINTERDOWN, this);\n    document.removeEventListener(Runner.events.POINTERUP, this);\n\n    if (this.isArcadeMode()) {\n      window.removeEventListener(Runner.events.GAMEPADCONNECTED, this);\n    }\n  },\n\n  /**\n   * Process keydown.\n   * @param {Event} e\n   */\n  onKeyDown(e) {\n    // Prevent native page scrolling whilst tapping on mobile.\n    if (IS_MOBILE && this.playing) {\n      e.preventDefault();\n    }\n\n    if (this.isCanvasInView()) {\n      // Allow toggling of speed toggle.\n      if (Runner.keycodes.JUMP[e.keyCode] && e.target == this.slowSpeedCheckbox) {\n        return;\n      }\n\n      if (!this.crashed && !this.paused) {\n        // For a11y, screen reader activation.\n        const isMobileMouseInput =\n          (IS_MOBILE &&\n            e.type === Runner.events.POINTERDOWN &&\n            e.pointerType == 'mouse' &&\n            e.target == this.containerEl) ||\n          (IS_IOS && e.pointerType == 'touch' && document.activeElement == this.containerEl);\n\n        if (\n          Runner.keycodes.JUMP[e.keyCode] ||\n          e.type === Runner.events.TOUCHSTART ||\n          isMobileMouseInput ||\n          (Runner.keycodes.DUCK[e.keyCode] && this.altGameModeActive)\n        ) {\n          e.preventDefault();\n          // Starting the game for the first time.\n          if (!this.playing) {\n            // Started by touch so create a touch controller.\n            if (!this.touchController && e.type === Runner.events.TOUCHSTART) {\n              this.createTouchController();\n            }\n\n            if (isMobileMouseInput) {\n              this.handleCanvasKeyPress(e);\n            }\n            this.loadSounds();\n            this.setPlayStatus(true);\n            this.update();\n            if (window.errorPageController) {\n              errorPageController.trackEasterEgg();\n            }\n          }\n          // Start jump.\n          if (!this.tRex.jumping && !this.tRex.ducking) {\n            if (Runner.audioCues) {\n              this.generatedSoundFx.cancelFootSteps();\n            } else {\n              this.playSound(this.soundFx.BUTTON_PRESS);\n            }\n            this.tRex.startJump(this.currentSpeed);\n          }\n          // Ducking is disabled on alt game modes.\n        } else if (!this.altGameModeActive && this.playing && Runner.keycodes.DUCK[e.keyCode]) {\n          e.preventDefault();\n          if (this.tRex.jumping) {\n            // Speed drop, activated only when jump key is not pressed.\n            this.tRex.setSpeedDrop();\n          } else if (!this.tRex.jumping && !this.tRex.ducking) {\n            // Duck.\n            this.tRex.setDuck(true);\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Process key up.\n   * @param {Event} e\n   */\n  onKeyUp(e) {\n    const keyCode = String(e.keyCode);\n    const isjumpKey =\n      Runner.keycodes.JUMP[keyCode] ||\n      e.type === Runner.events.TOUCHEND ||\n      e.type === Runner.events.POINTERUP;\n\n    if (this.isRunning() && isjumpKey) {\n      this.tRex.endJump();\n    } else if (Runner.keycodes.DUCK[keyCode]) {\n      this.tRex.speedDrop = false;\n      this.tRex.setDuck(false);\n    } else if (this.crashed) {\n      // Check that enough time has elapsed before allowing jump key to restart.\n      const deltaTime = getTimeStamp() - this.time;\n\n      if (\n        this.isCanvasInView() &&\n        (Runner.keycodes.RESTART[keyCode] ||\n          this.isLeftClickOnCanvas(e) ||\n          (deltaTime >= this.config.GAMEOVER_CLEAR_TIME && Runner.keycodes.JUMP[keyCode]))\n      ) {\n        this.handleGameOverClicks(e);\n      }\n    } else if (this.paused && isjumpKey) {\n      // Reset the jump state\n      this.tRex.reset();\n      this.play();\n    }\n  },\n\n  /**\n   * Process gamepad connected event.\n   * @param {Event} e\n   */\n  onGamepadConnected(e) {\n    if (!this.pollingGamepads) {\n      this.pollGamepadState();\n    }\n  },\n\n  /**\n   * rAF loop for gamepad polling.\n   */\n  pollGamepadState() {\n    const gamepads = navigator.getGamepads();\n    this.pollActiveGamepad(gamepads);\n\n    this.pollingGamepads = true;\n    requestAnimationFrame(this.pollGamepadState.bind(this));\n  },\n\n  /**\n   * Polls for a gamepad with the jump button pressed. If one is found this\n   * becomes the \"active\" gamepad and all others are ignored.\n   * @param {!Array<Gamepad>} gamepads\n   */\n  pollForActiveGamepad(gamepads) {\n    for (let i = 0; i < gamepads.length; ++i) {\n      if (gamepads[i] && gamepads[i].buttons.length > 0 && gamepads[i].buttons[0].pressed) {\n        this.gamepadIndex = i;\n        this.pollActiveGamepad(gamepads);\n        return;\n      }\n    }\n  },\n\n  /**\n   * Polls the chosen gamepad for button presses and generates KeyboardEvents\n   * to integrate with the rest of the game logic.\n   * @param {!Array<Gamepad>} gamepads\n   */\n  pollActiveGamepad(gamepads) {\n    if (this.gamepadIndex === undefined) {\n      this.pollForActiveGamepad(gamepads);\n      return;\n    }\n\n    const gamepad = gamepads[this.gamepadIndex];\n    if (!gamepad) {\n      this.gamepadIndex = undefined;\n      this.pollForActiveGamepad(gamepads);\n      return;\n    }\n\n    // The gamepad specification defines the typical mapping of physical buttons\n    // to button indices: https://w3c.github.io/gamepad/#remapping\n    this.pollGamepadButton(gamepad, 0, 38); // Jump\n    if (gamepad.buttons.length >= 2) {\n      this.pollGamepadButton(gamepad, 1, 40); // Duck\n    }\n    if (gamepad.buttons.length >= 10) {\n      this.pollGamepadButton(gamepad, 9, 13); // Restart\n    }\n\n    this.previousGamepad = gamepad;\n  },\n\n  /**\n   * Generates a key event based on a gamepad button.\n   * @param {!Gamepad} gamepad\n   * @param {number} buttonIndex\n   * @param {number} keyCode\n   */\n  pollGamepadButton(gamepad, buttonIndex, keyCode) {\n    const state = gamepad.buttons[buttonIndex].pressed;\n    let previousState = false;\n    if (this.previousGamepad) {\n      previousState = this.previousGamepad.buttons[buttonIndex].pressed;\n    }\n    // Generate key events on the rising and falling edge of a button press.\n    if (state !== previousState) {\n      const e = new KeyboardEvent(state ? Runner.events.KEYDOWN : Runner.events.KEYUP, {\n        keyCode: keyCode,\n      });\n      document.dispatchEvent(e);\n    }\n  },\n\n  /**\n   * Handle interactions on the game over screen state.\n   * A user is able to tap the high score twice to reset it.\n   * @param {Event} e\n   */\n  handleGameOverClicks(e) {\n    if (e.target != this.slowSpeedCheckbox) {\n      e.preventDefault();\n      if (this.distanceMeter.hasClickedOnHighScore(e) && this.highestScore) {\n        if (this.distanceMeter.isHighScoreFlashing()) {\n          // Subsequent click, reset the high score.\n          this.saveHighScore(0, true);\n          this.distanceMeter.resetHighScore();\n        } else {\n          // First click, flash the high score.\n          this.distanceMeter.startHighScoreFlashing();\n        }\n      } else {\n        this.distanceMeter.cancelHighScoreFlashing();\n        this.restart();\n      }\n    }\n  },\n\n  /**\n   * Returns whether the event was a left click on canvas.\n   * On Windows right click is registered as a click.\n   * @param {Event} e\n   * @return {boolean}\n   */\n  isLeftClickOnCanvas(e) {\n    return (\n      e.button != null &&\n      e.button < 2 &&\n      e.type === Runner.events.POINTERUP &&\n      (e.target === this.canvas || (IS_MOBILE && Runner.audioCues && e.target === this.containerEl))\n    );\n  },\n\n  /**\n   * RequestAnimationFrame wrapper.\n   */\n  scheduleNextUpdate() {\n    if (!this.updatePending) {\n      this.updatePending = true;\n      this.raqId = requestAnimationFrame(this.update.bind(this));\n    }\n  },\n\n  /**\n   * Whether the game is running.\n   * @return {boolean}\n   */\n  isRunning() {\n    return !!this.raqId;\n  },\n\n  /**\n   * Set the initial high score as stored in the user's profile.\n   * @param {number} highScore\n   */\n  initializeHighScore(highScore) {\n    this.syncHighestScore = true;\n    highScore = Math.ceil(highScore);\n    if (highScore < this.highestScore) {\n      if (window.errorPageController) {\n        errorPageController.updateEasterEggHighScore(this.highestScore);\n      }\n      return;\n    }\n    this.highestScore = highScore;\n    this.distanceMeter.setHighScore(this.highestScore);\n  },\n\n  /**\n   * Sets the current high score and saves to the profile if available.\n   * @param {number} distanceRan Total distance ran.\n   * @param {boolean=} opt_resetScore Whether to reset the score.\n   */\n  saveHighScore(distanceRan, opt_resetScore) {\n    this.highestScore = Math.ceil(distanceRan);\n    this.distanceMeter.setHighScore(this.highestScore);\n\n    // Store the new high score in the profile.\n    if (this.syncHighestScore && window.errorPageController) {\n      if (opt_resetScore) {\n        errorPageController.resetEasterEggHighScore();\n      } else {\n        errorPageController.updateEasterEggHighScore(this.highestScore);\n      }\n    }\n  },\n\n  /**\n   * Game over state.\n   */\n  gameOver() {\n    this.playSound(this.soundFx.HIT);\n    vibrate(200);\n\n    this.stop();\n    this.crashed = true;\n    this.distanceMeter.achievement = false;\n\n    this.tRex.update(100, Trex.status.CRASHED);\n\n    // Game over panel.\n    if (!this.gameOverPanel) {\n      const origSpriteDef = IS_HIDPI\n        ? Runner.spriteDefinitionByType.original.HDPI\n        : Runner.spriteDefinitionByType.original.LDPI;\n\n      if (this.canvas) {\n        if (Runner.isAltGameModeEnabled) {\n          this.gameOverPanel = new GameOverPanel(\n            this.canvas,\n            origSpriteDef.TEXT_SPRITE,\n            origSpriteDef.RESTART,\n            this.dimensions,\n            origSpriteDef.ALT_GAME_END,\n            this.altGameModeActive\n          );\n        } else {\n          this.gameOverPanel = new GameOverPanel(\n            this.canvas,\n            origSpriteDef.TEXT_SPRITE,\n            origSpriteDef.RESTART,\n            this.dimensions\n          );\n        }\n      }\n    }\n\n    this.gameOverPanel.draw(this.altGameModeActive, this.tRex);\n\n    // Update the high score.\n    if (this.distanceRan > this.highestScore) {\n      this.saveHighScore(this.distanceRan);\n    }\n\n    // Reset the time clock.\n    this.time = getTimeStamp();\n\n    if (Runner.audioCues) {\n      this.generatedSoundFx.stopAll();\n      announcePhrase(\n        getA11yString(A11Y_STRINGS.gameOver).replace(\n          '$1',\n          this.distanceMeter.getActualDistance(this.distanceRan).toString()\n        ) +\n          ' ' +\n          getA11yString(A11Y_STRINGS.highScore).replace(\n            '$1',\n\n            this.distanceMeter.getActualDistance(this.highestScore).toString()\n          )\n      );\n      this.containerEl.setAttribute('title', getA11yString(A11Y_STRINGS.ariaLabel));\n    }\n    this.showSpeedToggle();\n    this.disableSpeedToggle(false);\n  },\n\n  stop() {\n    this.setPlayStatus(false);\n    this.paused = true;\n    cancelAnimationFrame(this.raqId);\n    this.raqId = 0;\n    this.generatedSoundFx.stopAll();\n  },\n\n  play() {\n    if (!this.crashed) {\n      this.setPlayStatus(true);\n      this.paused = false;\n      this.tRex.update(0, Trex.status.RUNNING);\n      this.time = getTimeStamp();\n      this.update();\n      this.generatedSoundFx.background();\n    }\n  },\n\n  restart() {\n    if (!this.raqId) {\n      this.playCount++;\n      this.runningTime = 0;\n      this.setPlayStatus(true);\n      this.toggleSpeed();\n      this.paused = false;\n      this.crashed = false;\n      this.distanceRan = 0;\n      this.setSpeed(this.config.SPEED);\n      this.time = getTimeStamp();\n      this.containerEl.classList.remove(Runner.classes.CRASHED);\n      this.clearCanvas();\n      this.distanceMeter.reset();\n      this.horizon.reset();\n      this.tRex.reset();\n      this.playSound(this.soundFx.BUTTON_PRESS);\n      this.invert(true);\n      this.flashTimer = null;\n      this.update();\n      this.gameOverPanel.reset();\n      this.generatedSoundFx.background();\n      this.containerEl.setAttribute('title', getA11yString(A11Y_STRINGS.jump));\n      announcePhrase(getA11yString(A11Y_STRINGS.started));\n    }\n  },\n\n  setPlayStatus(isPlaying) {\n    if (this.touchController) {\n      this.touchController.classList.toggle(HIDDEN_CLASS, !isPlaying);\n    }\n    this.playing = isPlaying;\n  },\n\n  /**\n   * Whether the game should go into arcade mode.\n   * @return {boolean}\n   */\n  isArcadeMode() {\n    // In RTL languages the title is wrapped with the left to right mark\n    // control characters &#x202A; and &#x202C but are invisible.\n    return IS_RTL\n      ? document.title.indexOf(ARCADE_MODE_URL) == 1\n      : document.title === ARCADE_MODE_URL;\n  },\n\n  /**\n   * Hides offline messaging for a fullscreen game only experience.\n   */\n  setArcadeMode() {\n    document.body.classList.add(Runner.classes.ARCADE_MODE);\n    this.setArcadeModeContainerScale();\n  },\n\n  /**\n   * Sets the scaling for arcade mode.\n   */\n  setArcadeModeContainerScale() {\n    const windowHeight = window.innerHeight;\n    const scaleHeight = windowHeight / this.dimensions.HEIGHT;\n    const scaleWidth = window.innerWidth / this.dimensions.WIDTH;\n    const scale = Math.max(1, Math.min(scaleHeight, scaleWidth));\n    const scaledCanvasHeight = this.dimensions.HEIGHT * scale;\n    // Positions the game container at 10% of the available vertical window\n    // height minus the game container height.\n    const translateY =\n      Math.ceil(\n        Math.max(\n          0,\n          (windowHeight - scaledCanvasHeight - Runner.config.ARCADE_MODE_INITIAL_TOP_POSITION) *\n            Runner.config.ARCADE_MODE_TOP_POSITION_PERCENT\n        )\n      ) * window.devicePixelRatio;\n\n    const cssScale = IS_RTL ? -scale + ',' + scale : scale;\n    this.containerEl.style.transform = 'scale(' + cssScale + ') translateY(' + translateY + 'px)';\n  },\n\n  /**\n   * Pause the game if the tab is not in focus.\n   */\n  onVisibilityChange(e) {\n    if (\n      document.hidden ||\n      document.webkitHidden ||\n      e.type === 'blur' ||\n      document.visibilityState !== 'visible'\n    ) {\n      this.stop();\n    } else if (!this.crashed) {\n      this.tRex.reset();\n      this.play();\n    }\n  },\n\n  /**\n   * Play a sound.\n   * @param {AudioBuffer} soundBuffer\n   */\n  playSound(soundBuffer) {\n    if (soundBuffer) {\n      const sourceNode = this.audioContext.createBufferSource();\n      sourceNode.buffer = soundBuffer;\n      sourceNode.connect(this.audioContext.destination);\n      sourceNode.start(0);\n    }\n  },\n\n  /**\n   * Inverts the current page / canvas colors.\n   * @param {boolean} reset Whether to reset colors.\n   */\n  invert(reset) {\n    const htmlEl = document.firstElementChild;\n\n    if (reset) {\n      htmlEl.classList.toggle(Runner.classes.INVERTED, false);\n      this.invertTimer = 0;\n      this.inverted = false;\n    } else {\n      this.inverted = htmlEl.classList.toggle(Runner.classes.INVERTED, this.invertTrigger);\n    }\n  },\n};\n\n/**\n * Updates the canvas size taking into\n * account the backing store pixel ratio and\n * the device pixel ratio.\n *\n * See article by Paul Lewis:\n * http://www.html5rocks.com/en/tutorials/canvas/hidpi/\n *\n * @param {HTMLCanvasElement} canvas\n * @param {number=} opt_width\n * @param {number=} opt_height\n * @return {boolean} Whether the canvas was scaled.\n */\nRunner.updateCanvasScaling = function (canvas, opt_width, opt_height) {\n  const context = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n\n  // Query the various pixel ratios\n  const devicePixelRatio = Math.floor(window.devicePixelRatio) || 1;\n  /** @suppress {missingProperties} */\n  const backingStoreRatio = Math.floor(context.webkitBackingStorePixelRatio) || 1;\n  const ratio = devicePixelRatio / backingStoreRatio;\n\n  // Upscale the canvas if the two ratios don't match\n  if (devicePixelRatio !== backingStoreRatio) {\n    const oldWidth = opt_width || canvas.width;\n    const oldHeight = opt_height || canvas.height;\n\n    canvas.width = oldWidth * ratio;\n    canvas.height = oldHeight * ratio;\n\n    canvas.style.width = oldWidth + 'px';\n    canvas.style.height = oldHeight + 'px';\n\n    // Scale the context to counter the fact that we've manually scaled\n    // our canvas element.\n    context.scale(ratio, ratio);\n    return true;\n  } else if (devicePixelRatio === 1) {\n    // Reset the canvas width / height. Fixes scaling bug when the page is\n    // zoomed and the devicePixelRatio changes accordingly.\n    canvas.style.width = canvas.width + 'px';\n    canvas.style.height = canvas.height + 'px';\n  }\n  return false;\n};\n\n/**\n * Whether events are enabled.\n * @return {boolean}\n */\nRunner.isAltGameModeEnabled = function () {\n  return loadTimeData && loadTimeData.valueExists('enableAltGameMode');\n};\n\n/**\n * Generated sound FX class for audio cues.\n * @constructor\n */\nfunction GeneratedSoundFx() {\n  this.audioCues = false;\n  this.context = null;\n  this.panner = null;\n}\n\nGeneratedSoundFx.prototype = {\n  init() {\n    this.audioCues = true;\n    if (!this.context) {\n      // iOS only supports the webkit version.\n      this.context = window.webkitAudioContext ? new webkitAudioContext() : new AudioContext();\n      if (IS_IOS) {\n        this.context.onstatechange = function () {\n          if (this.context.state != 'running') {\n            this.context.resume();\n          }\n        }.bind(this);\n        this.context.resume();\n      }\n      this.panner = this.context.createStereoPanner ? this.context.createStereoPanner() : null;\n    }\n  },\n\n  stopAll() {\n    this.cancelFootSteps();\n  },\n\n  /**\n   * Play oscillators at certain frequency and for a certain time.\n   * @param {number} frequency\n   * @param {number} startTime\n   * @param {number} duration\n   * @param {?number=} opt_vol\n   * @param {number=} opt_pan\n   */\n  playNote(frequency, startTime, duration, opt_vol, opt_pan) {\n    const osc1 = this.context.createOscillator();\n    const osc2 = this.context.createOscillator();\n    const volume = this.context.createGain();\n\n    // Set oscillator wave type\n    osc1.type = 'triangle';\n    osc2.type = 'triangle';\n    volume.gain.value = 0.1;\n\n    // Set up node routing\n    if (this.panner) {\n      this.panner.pan.value = opt_pan || 0;\n      osc1.connect(volume).connect(this.panner);\n      osc2.connect(volume).connect(this.panner);\n      this.panner.connect(this.context.destination);\n    } else {\n      osc1.connect(volume);\n      osc2.connect(volume);\n      volume.connect(this.context.destination);\n    }\n\n    // Detune oscillators for chorus effect\n    osc1.frequency.value = frequency + 1;\n    osc2.frequency.value = frequency - 2;\n\n    // Fade out\n    volume.gain.setValueAtTime(opt_vol || 0.01, startTime + duration - 0.05);\n    volume.gain.linearRampToValueAtTime(0.00001, startTime + duration);\n\n    // Start oscillators\n    osc1.start(startTime);\n    osc2.start(startTime);\n    // Stop oscillators\n    osc1.stop(startTime + duration);\n    osc2.stop(startTime + duration);\n  },\n\n  background() {\n    if (this.audioCues) {\n      const now = this.context.currentTime;\n      this.playNote(493.883, now, 0.116);\n      this.playNote(659.255, now + 0.116, 0.232);\n      this.loopFootSteps();\n    }\n  },\n\n  loopFootSteps() {\n    if (this.audioCues && !this.bgSoundIntervalId) {\n      this.bgSoundIntervalId = setInterval(\n        function () {\n          this.playNote(73.42, this.context.currentTime, 0.05, 0.16);\n          this.playNote(69.3, this.context.currentTime + 0.116, 0.116, 0.16);\n        }.bind(this),\n        280\n      );\n    }\n  },\n\n  cancelFootSteps() {\n    if (this.audioCues && this.bgSoundIntervalId) {\n      clearInterval(this.bgSoundIntervalId);\n      this.bgSoundIntervalId = null;\n      this.playNote(103.83, this.context.currentTime, 0.232, 0.02);\n      this.playNote(116.54, this.context.currentTime + 0.116, 0.232, 0.02);\n    }\n  },\n\n  collect() {\n    if (this.audioCues) {\n      this.cancelFootSteps();\n      const now = this.context.currentTime;\n      this.playNote(830.61, now, 0.116);\n      this.playNote(1318.51, now + 0.116, 0.232);\n    }\n  },\n\n  jump() {\n    if (this.audioCues) {\n      const now = this.context.currentTime;\n      this.playNote(659.25, now, 0.116, 0.3, -0.6);\n      this.playNote(880, now + 0.116, 0.232, 0.3, -0.6);\n    }\n  },\n};\n\n/**\n * Speak a phrase using Speech Synthesis API for a11y.\n * @param {string} phrase Sentence to speak.\n */\nfunction speakPhrase(phrase) {\n  if ('speechSynthesis' in window) {\n    const msg = new SpeechSynthesisUtterance(phrase);\n    const voices = window.speechSynthesis.getVoices();\n    msg.text = phrase;\n    speechSynthesis.speak(msg);\n  }\n}\n\n/**\n * For screen readers make an announcement to the live region.\n * @param {string} phrase Sentence to speak.\n */\nfunction announcePhrase(phrase) {\n  if (Runner.a11yStatusEl) {\n    Runner.a11yStatusEl.textContent = '';\n    Runner.a11yStatusEl.textContent = phrase;\n  }\n}\n\n/**\n * Returns a string from loadTimeData data object.\n * @param {string} stringName\n * @return {string}\n */\nfunction getA11yString(stringName) {\n  return loadTimeData && loadTimeData.valueExists(stringName)\n    ? loadTimeData.getString(stringName)\n    : '';\n}\n\n/**\n * Get random number.\n * @param {number} min\n * @param {number} max\n */\nfunction getRandomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Vibrate on mobile devices.\n * @param {number} duration Duration of the vibration in milliseconds.\n */\nfunction vibrate(duration) {\n  if (IS_MOBILE && window.navigator.vibrate) {\n    window.navigator.vibrate(duration);\n  }\n}\n\n/**\n * Create canvas element.\n * @param {Element} container Element to append canvas to.\n * @param {number} width\n * @param {number} height\n * @param {string=} opt_classname\n * @return {HTMLCanvasElement}\n */\nfunction createCanvas(container, width, height, opt_classname) {\n  const canvas = /** @type {!HTMLCanvasElement} */ (document.createElement('canvas'));\n  canvas.className = opt_classname\n    ? Runner.classes.CANVAS + ' ' + opt_classname\n    : Runner.classes.CANVAS;\n  canvas.width = width;\n  canvas.height = height;\n  container.appendChild(canvas);\n\n  return canvas;\n}\n\n/**\n * Decodes the base 64 audio to ArrayBuffer used by Web Audio.\n * @param {string} base64String\n */\nfunction decodeBase64ToArrayBuffer(base64String) {\n  const len = (base64String.length / 4) * 3;\n  const str = atob(base64String);\n  const arrayBuffer = new ArrayBuffer(len);\n  const bytes = new Uint8Array(arrayBuffer);\n\n  for (let i = 0; i < len; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n\n/**\n * Return the current timestamp.\n * @return {number}\n */\nfunction getTimeStamp() {\n  return IS_IOS ? new Date().getTime() : performance.now();\n}\n\n//******************************************************************************\n\n/**\n * Game over panel.\n * @param {!HTMLCanvasElement} canvas\n * @param {Object} textImgPos\n * @param {Object} restartImgPos\n * @param {!Object} dimensions Canvas dimensions.\n * @param {Object=} opt_altGameEndImgPos\n * @param {boolean=} opt_altGameActive\n * @constructor\n */\nfunction GameOverPanel(\n  canvas,\n  textImgPos,\n  restartImgPos,\n  dimensions,\n  opt_altGameEndImgPos,\n  opt_altGameActive\n) {\n  this.canvas = canvas;\n  this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n  this.canvasDimensions = dimensions;\n  this.textImgPos = textImgPos;\n  this.restartImgPos = restartImgPos;\n  this.altGameEndImgPos = opt_altGameEndImgPos;\n  this.altGameModeActive = opt_altGameActive;\n\n  // Retry animation.\n  this.frameTimeStamp = 0;\n  this.animTimer = 0;\n  this.currentFrame = 0;\n\n  this.gameOverRafId = null;\n\n  this.flashTimer = 0;\n  this.flashCounter = 0;\n  this.originalText = true;\n}\n\nGameOverPanel.RESTART_ANIM_DURATION = 875;\nGameOverPanel.LOGO_PAUSE_DURATION = 875;\nGameOverPanel.FLASH_ITERATIONS = 5;\n\n/**\n * Animation frames spec.\n */\nGameOverPanel.animConfig = {\n  frames: [0, 36, 72, 108, 144, 180, 216, 252],\n  msPerFrame: GameOverPanel.RESTART_ANIM_DURATION / 8,\n};\n\n/**\n * Dimensions used in the panel.\n * @enum {number}\n */\nGameOverPanel.dimensions = {\n  TEXT_X: 0,\n  TEXT_Y: 13,\n  TEXT_WIDTH: 191,\n  TEXT_HEIGHT: 11,\n  RESTART_WIDTH: 36,\n  RESTART_HEIGHT: 32,\n};\n\nGameOverPanel.prototype = {\n  /**\n   * Update the panel dimensions.\n   * @param {number} width New canvas width.\n   * @param {number} opt_height Optional new canvas height.\n   */\n  updateDimensions(width, opt_height) {\n    this.canvasDimensions.WIDTH = width;\n    if (opt_height) {\n      this.canvasDimensions.HEIGHT = opt_height;\n    }\n    this.currentFrame = GameOverPanel.animConfig.frames.length - 1;\n  },\n\n  drawGameOverText(dimensions, opt_useAltText) {\n    const centerX = this.canvasDimensions.WIDTH / 2;\n    let textSourceX = dimensions.TEXT_X;\n    let textSourceY = dimensions.TEXT_Y;\n    let textSourceWidth = dimensions.TEXT_WIDTH;\n    let textSourceHeight = dimensions.TEXT_HEIGHT;\n\n    const textTargetX = Math.round(centerX - dimensions.TEXT_WIDTH / 2);\n    const textTargetY = Math.round((this.canvasDimensions.HEIGHT - 25) / 3);\n    const textTargetWidth = dimensions.TEXT_WIDTH;\n    const textTargetHeight = dimensions.TEXT_HEIGHT;\n\n    if (IS_HIDPI) {\n      textSourceY *= 2;\n      textSourceX *= 2;\n      textSourceWidth *= 2;\n      textSourceHeight *= 2;\n    }\n\n    if (!opt_useAltText) {\n      textSourceX += this.textImgPos.x;\n      textSourceY += this.textImgPos.y;\n    }\n\n    const spriteSource = opt_useAltText ? Runner.altCommonImageSprite : Runner.origImageSprite;\n\n    this.canvasCtx.save();\n\n    if (IS_RTL) {\n      this.canvasCtx.translate(this.canvasDimensions.WIDTH, 0);\n      this.canvasCtx.scale(-1, 1);\n    }\n\n    // Game over text from sprite.\n    this.canvasCtx.drawImage(\n      spriteSource,\n      textSourceX,\n      textSourceY,\n      textSourceWidth,\n      textSourceHeight,\n      textTargetX,\n      textTargetY,\n      textTargetWidth,\n      textTargetHeight\n    );\n\n    this.canvasCtx.restore();\n  },\n\n  /**\n   * Draw additional adornments for alternative game types.\n   */\n  drawAltGameElements(tRex) {\n    // Additional adornments.\n    if (this.altGameModeActive && Runner.spriteDefinition.ALT_GAME_END_CONFIG) {\n      const altGameEndConfig = Runner.spriteDefinition.ALT_GAME_END_CONFIG;\n\n      let altGameEndSourceWidth = altGameEndConfig.WIDTH;\n      let altGameEndSourceHeight = altGameEndConfig.HEIGHT;\n      const altGameEndTargetX = tRex.xPos + altGameEndConfig.X_OFFSET;\n      const altGameEndTargetY = tRex.yPos + altGameEndConfig.Y_OFFSET;\n\n      if (IS_HIDPI) {\n        altGameEndSourceWidth *= 2;\n        altGameEndSourceHeight *= 2;\n      }\n\n      this.canvasCtx.drawImage(\n        Runner.altCommonImageSprite,\n        this.altGameEndImgPos.x,\n        this.altGameEndImgPos.y,\n        altGameEndSourceWidth,\n        altGameEndSourceHeight,\n        altGameEndTargetX,\n        altGameEndTargetY,\n        altGameEndConfig.WIDTH,\n        altGameEndConfig.HEIGHT\n      );\n    }\n  },\n\n  /**\n   * Draw restart button.\n   */\n  drawRestartButton() {\n    const dimensions = GameOverPanel.dimensions;\n    let framePosX = GameOverPanel.animConfig.frames[this.currentFrame];\n    let restartSourceWidth = dimensions.RESTART_WIDTH;\n    let restartSourceHeight = dimensions.RESTART_HEIGHT;\n    const restartTargetX = this.canvasDimensions.WIDTH / 2 - dimensions.RESTART_WIDTH / 2;\n    const restartTargetY = this.canvasDimensions.HEIGHT / 2;\n\n    if (IS_HIDPI) {\n      restartSourceWidth *= 2;\n      restartSourceHeight *= 2;\n      framePosX *= 2;\n    }\n\n    this.canvasCtx.save();\n\n    if (IS_RTL) {\n      this.canvasCtx.translate(this.canvasDimensions.WIDTH, 0);\n      this.canvasCtx.scale(-1, 1);\n    }\n\n    this.canvasCtx.drawImage(\n      Runner.origImageSprite,\n      this.restartImgPos.x + framePosX,\n      this.restartImgPos.y,\n      restartSourceWidth,\n      restartSourceHeight,\n      restartTargetX,\n      restartTargetY,\n      dimensions.RESTART_WIDTH,\n      dimensions.RESTART_HEIGHT\n    );\n    this.canvasCtx.restore();\n  },\n\n  /**\n   * Draw the panel.\n   * @param {boolean} opt_altGameModeActive\n   * @param {!Trex} opt_tRex\n   */\n  draw(opt_altGameModeActive, opt_tRex) {\n    if (opt_altGameModeActive) {\n      this.altGameModeActive = opt_altGameModeActive;\n    }\n\n    this.drawGameOverText(GameOverPanel.dimensions, false);\n    this.drawRestartButton();\n    this.drawAltGameElements(opt_tRex);\n    this.update();\n  },\n\n  /**\n   * Update animation frames.\n   */\n  update() {\n    const now = getTimeStamp();\n    const deltaTime = now - (this.frameTimeStamp || now);\n\n    this.frameTimeStamp = now;\n    this.animTimer += deltaTime;\n    this.flashTimer += deltaTime;\n\n    // Restart Button\n    if (this.currentFrame == 0 && this.animTimer > GameOverPanel.LOGO_PAUSE_DURATION) {\n      this.animTimer = 0;\n      this.currentFrame++;\n      this.drawRestartButton();\n    } else if (\n      this.currentFrame > 0 &&\n      this.currentFrame < GameOverPanel.animConfig.frames.length\n    ) {\n      if (this.animTimer >= GameOverPanel.animConfig.msPerFrame) {\n        this.currentFrame++;\n        this.drawRestartButton();\n      }\n    } else if (\n      !this.altGameModeActive &&\n      this.currentFrame == GameOverPanel.animConfig.frames.length\n    ) {\n      this.reset();\n      return;\n    }\n\n    // Game over text\n    if (\n      this.altGameModeActive &&\n      Runner.spriteDefinitionByType.original.ALT_GAME_OVER_TEXT_CONFIG\n    ) {\n      const altTextConfig = Runner.spriteDefinitionByType.original.ALT_GAME_OVER_TEXT_CONFIG;\n\n      if (\n        this.flashCounter < GameOverPanel.FLASH_ITERATIONS &&\n        this.flashTimer > altTextConfig.FLASH_DURATION\n      ) {\n        this.flashTimer = 0;\n        this.originalText = !this.originalText;\n\n        this.clearGameOverTextBounds();\n        if (this.originalText) {\n          this.drawGameOverText(GameOverPanel.dimensions, false);\n          this.flashCounter++;\n        } else {\n          this.drawGameOverText(altTextConfig, true);\n        }\n      } else if (this.flashCounter >= GameOverPanel.FLASH_ITERATIONS) {\n        this.reset();\n        return;\n      }\n    }\n\n    this.gameOverRafId = requestAnimationFrame(this.update.bind(this));\n  },\n\n  /**\n   * Clear game over text.\n   */\n  clearGameOverTextBounds() {\n    this.canvasCtx.save();\n\n    this.canvasCtx.clearRect(\n      Math.round(this.canvasDimensions.WIDTH / 2 - GameOverPanel.dimensions.TEXT_WIDTH / 2),\n      Math.round((this.canvasDimensions.HEIGHT - 25) / 3),\n      GameOverPanel.dimensions.TEXT_WIDTH,\n      GameOverPanel.dimensions.TEXT_HEIGHT + 4\n    );\n    this.canvasCtx.restore();\n  },\n\n  reset() {\n    if (this.gameOverRafId) {\n      cancelAnimationFrame(this.gameOverRafId);\n      this.gameOverRafId = null;\n    }\n    this.animTimer = 0;\n    this.frameTimeStamp = 0;\n    this.currentFrame = 0;\n    this.flashTimer = 0;\n    this.flashCounter = 0;\n    this.originalText = true;\n  },\n};\n\n//******************************************************************************\n\n/**\n * Check for a collision.\n * @param {!Obstacle} obstacle\n * @param {!Trex} tRex T-rex object.\n * @param {CanvasRenderingContext2D=} opt_canvasCtx Optional canvas context for\n *    drawing collision boxes.\n * @return {Array<CollisionBox>|undefined}\n */\nfunction checkForCollision(obstacle, tRex, opt_canvasCtx) {\n  const obstacleBoxXPos = Runner.defaultDimensions.WIDTH + obstacle.xPos;\n\n  // Adjustments are made to the bounding box as there is a 1 pixel white\n  // border around the t-rex and obstacles.\n  const tRexBox = new CollisionBox(\n    tRex.xPos + 1,\n    tRex.yPos + 1,\n    tRex.config.WIDTH - 2,\n    tRex.config.HEIGHT - 2\n  );\n\n  const obstacleBox = new CollisionBox(\n    obstacle.xPos + 1,\n    obstacle.yPos + 1,\n    obstacle.typeConfig.width * obstacle.size - 2,\n    obstacle.typeConfig.height - 2\n  );\n\n  // Debug outer box\n  if (opt_canvasCtx) {\n    drawCollisionBoxes(opt_canvasCtx, tRexBox, obstacleBox);\n  }\n\n  // Simple outer bounds check.\n  if (boxCompare(tRexBox, obstacleBox)) {\n    const collisionBoxes = obstacle.collisionBoxes;\n    let tRexCollisionBoxes = [];\n\n    if (Runner.isAltGameModeEnabled()) {\n      tRexCollisionBoxes = Runner.spriteDefinition.TREX.COLLISION_BOXES;\n    } else {\n      tRexCollisionBoxes = tRex.ducking ? Trex.collisionBoxes.DUCKING : Trex.collisionBoxes.RUNNING;\n    }\n\n    // Detailed axis aligned box check.\n    for (let t = 0; t < tRexCollisionBoxes.length; t++) {\n      for (let i = 0; i < collisionBoxes.length; i++) {\n        // Adjust the box to actual positions.\n        const adjTrexBox = createAdjustedCollisionBox(tRexCollisionBoxes[t], tRexBox);\n        const adjObstacleBox = createAdjustedCollisionBox(collisionBoxes[i], obstacleBox);\n        const crashed = boxCompare(adjTrexBox, adjObstacleBox);\n\n        // Draw boxes for debug.\n        if (opt_canvasCtx) {\n          drawCollisionBoxes(opt_canvasCtx, adjTrexBox, adjObstacleBox);\n        }\n\n        if (crashed) {\n          return [adjTrexBox, adjObstacleBox];\n        }\n      }\n    }\n  }\n}\n\n/**\n * Adjust the collision box.\n * @param {!CollisionBox} box The original box.\n * @param {!CollisionBox} adjustment Adjustment box.\n * @return {CollisionBox} The adjusted collision box object.\n */\nfunction createAdjustedCollisionBox(box, adjustment) {\n  return new CollisionBox(box.x + adjustment.x, box.y + adjustment.y, box.width, box.height);\n}\n\n/**\n * Draw the collision boxes for debug.\n */\nfunction drawCollisionBoxes(canvasCtx, tRexBox, obstacleBox) {\n  canvasCtx.save();\n  canvasCtx.strokeStyle = '#f00';\n  canvasCtx.strokeRect(tRexBox.x, tRexBox.y, tRexBox.width, tRexBox.height);\n\n  canvasCtx.strokeStyle = '#0f0';\n  canvasCtx.strokeRect(obstacleBox.x, obstacleBox.y, obstacleBox.width, obstacleBox.height);\n  canvasCtx.restore();\n}\n\n/**\n * Compare two collision boxes for a collision.\n * @param {CollisionBox} tRexBox\n * @param {CollisionBox} obstacleBox\n * @return {boolean} Whether the boxes intersected.\n */\nfunction boxCompare(tRexBox, obstacleBox) {\n  let crashed = false;\n  const tRexBoxX = tRexBox.x;\n  const tRexBoxY = tRexBox.y;\n\n  const obstacleBoxX = obstacleBox.x;\n  const obstacleBoxY = obstacleBox.y;\n\n  // Axis-Aligned Bounding Box method.\n  if (\n    tRexBox.x < obstacleBoxX + obstacleBox.width &&\n    tRexBox.x + tRexBox.width > obstacleBoxX &&\n    tRexBox.y < obstacleBox.y + obstacleBox.height &&\n    tRexBox.height + tRexBox.y > obstacleBox.y\n  ) {\n    crashed = true;\n  }\n\n  return crashed;\n}\n\n//******************************************************************************\n\n/**\n * Collision box object.\n * @param {number} x X position.\n * @param {number} y Y Position.\n * @param {number} w Width.\n * @param {number} h Height.\n * @constructor\n */\nfunction CollisionBox(x, y, w, h) {\n  this.x = x;\n  this.y = y;\n  this.width = w;\n  this.height = h;\n}\n\n//******************************************************************************\n\n/**\n * Obstacle.\n * @param {CanvasRenderingContext2D} canvasCtx\n * @param {ObstacleType} type\n * @param {Object} spriteImgPos Obstacle position in sprite.\n * @param {Object} dimensions\n * @param {number} gapCoefficient Mutipler in determining the gap.\n * @param {number} speed\n * @param {number=} opt_xOffset\n * @param {boolean=} opt_isAltGameMode\n * @constructor\n */\nfunction Obstacle(\n  canvasCtx,\n  type,\n  spriteImgPos,\n  dimensions,\n  gapCoefficient,\n  speed,\n  opt_xOffset,\n  opt_isAltGameMode\n) {\n  this.canvasCtx = canvasCtx;\n  this.spritePos = spriteImgPos;\n  this.typeConfig = type;\n  this.gapCoefficient = Runner.slowDown ? gapCoefficient * 2 : gapCoefficient;\n  this.size = getRandomNum(1, Obstacle.MAX_OBSTACLE_LENGTH);\n  this.dimensions = dimensions;\n  this.remove = false;\n  this.xPos = dimensions.WIDTH + (opt_xOffset || 0);\n  this.yPos = 0;\n  this.width = 0;\n  this.collisionBoxes = [];\n  this.gap = 0;\n  this.speedOffset = 0;\n  this.altGameModeActive = opt_isAltGameMode;\n  this.imageSprite =\n    this.typeConfig.type == 'COLLECTABLE'\n      ? Runner.altCommonImageSprite\n      : this.altGameModeActive\n      ? Runner.altGameImageSprite\n      : Runner.imageSprite;\n\n  // For animated obstacles.\n  this.currentFrame = 0;\n  this.timer = 0;\n\n  this.init(speed);\n}\n\n/**\n * Coefficient for calculating the maximum gap.\n */\nObstacle.MAX_GAP_COEFFICIENT = 1.5;\n\n/**\n * Maximum obstacle grouping count.\n */\nObstacle.MAX_OBSTACLE_LENGTH = 3;\n\nObstacle.prototype = {\n  /**\n   * Initialise the DOM for the obstacle.\n   * @param {number} speed\n   */\n  init(speed) {\n    this.cloneCollisionBoxes();\n\n    // Only allow sizing if we're at the right speed.\n    if (this.size > 1 && this.typeConfig.multipleSpeed > speed) {\n      this.size = 1;\n    }\n\n    this.width = this.typeConfig.width * this.size;\n\n    // Check if obstacle can be positioned at various heights.\n    if (Array.isArray(this.typeConfig.yPos)) {\n      const yPosConfig = IS_MOBILE ? this.typeConfig.yPosMobile : this.typeConfig.yPos;\n      this.yPos = yPosConfig[getRandomNum(0, yPosConfig.length - 1)];\n    } else {\n      this.yPos = this.typeConfig.yPos;\n    }\n\n    this.draw();\n\n    // Make collision box adjustments,\n    // Central box is adjusted to the size as one box.\n    //      ____        ______        ________\n    //    _|   |-|    _|     |-|    _|       |-|\n    //   | |<->| |   | |<--->| |   | |<----->| |\n    //   | | 1 | |   | |  2  | |   | |   3   | |\n    //   |_|___|_|   |_|_____|_|   |_|_______|_|\n    //\n    if (this.size > 1) {\n      this.collisionBoxes[1].width =\n        this.width - this.collisionBoxes[0].width - this.collisionBoxes[2].width;\n      this.collisionBoxes[2].x = this.width - this.collisionBoxes[2].width;\n    }\n\n    // For obstacles that go at a different speed from the horizon.\n    if (this.typeConfig.speedOffset) {\n      this.speedOffset =\n        Math.random() > 0.5 ? this.typeConfig.speedOffset : -this.typeConfig.speedOffset;\n    }\n\n    this.gap = this.getGap(this.gapCoefficient, speed);\n\n    // Increase gap for audio cues enabled.\n    if (Runner.audioCues) {\n      this.gap *= 2;\n    }\n  },\n\n  /**\n   * Draw and crop based on size.\n   */\n  draw() {\n    let sourceWidth = this.typeConfig.width;\n    let sourceHeight = this.typeConfig.height;\n\n    if (IS_HIDPI) {\n      sourceWidth = sourceWidth * 2;\n      sourceHeight = sourceHeight * 2;\n    }\n\n    // X position in sprite.\n    let sourceX = sourceWidth * this.size * (0.5 * (this.size - 1)) + this.spritePos.x;\n\n    // Animation frames.\n    if (this.currentFrame > 0) {\n      sourceX += sourceWidth * this.currentFrame;\n    }\n\n    this.canvasCtx.drawImage(\n      this.imageSprite,\n      sourceX,\n      this.spritePos.y,\n      sourceWidth * this.size,\n      sourceHeight,\n      this.xPos,\n      this.yPos,\n      this.typeConfig.width * this.size,\n      this.typeConfig.height\n    );\n  },\n\n  /**\n   * Obstacle frame update.\n   * @param {number} deltaTime\n   * @param {number} speed\n   */\n  update(deltaTime, speed) {\n    if (!this.remove) {\n      if (this.typeConfig.speedOffset) {\n        speed += this.speedOffset;\n      }\n      this.xPos -= Math.floor(((speed * FPS) / 1000) * deltaTime);\n\n      // Update frame\n      if (this.typeConfig.numFrames) {\n        this.timer += deltaTime;\n        if (this.timer >= this.typeConfig.frameRate) {\n          this.currentFrame =\n            this.currentFrame === this.typeConfig.numFrames - 1 ? 0 : this.currentFrame + 1;\n          this.timer = 0;\n        }\n      }\n      this.draw();\n\n      if (!this.isVisible()) {\n        this.remove = true;\n      }\n    }\n  },\n\n  /**\n   * Calculate a random gap size.\n   * - Minimum gap gets wider as speed increses\n   * @param {number} gapCoefficient\n   * @param {number} speed\n   * @return {number} The gap size.\n   */\n  getGap(gapCoefficient, speed) {\n    const minGap = Math.round(this.width * speed + this.typeConfig.minGap * gapCoefficient);\n    const maxGap = Math.round(minGap * Obstacle.MAX_GAP_COEFFICIENT);\n    return getRandomNum(minGap, maxGap);\n  },\n\n  /**\n   * Check if obstacle is visible.\n   * @return {boolean} Whether the obstacle is in the game area.\n   */\n  isVisible() {\n    return this.xPos + this.width > 0;\n  },\n\n  /**\n   * Make a copy of the collision boxes, since these will change based on\n   * obstacle type and size.\n   */\n  cloneCollisionBoxes() {\n    const collisionBoxes = this.typeConfig.collisionBoxes;\n\n    for (let i = collisionBoxes.length - 1; i >= 0; i--) {\n      this.collisionBoxes[i] = new CollisionBox(\n        collisionBoxes[i].x,\n        collisionBoxes[i].y,\n        collisionBoxes[i].width,\n        collisionBoxes[i].height\n      );\n    }\n  },\n};\n\n//******************************************************************************\n/**\n * T-rex game character.\n * @param {HTMLCanvasElement} canvas\n * @param {Object} spritePos Positioning within image sprite.\n * @constructor\n */\nfunction Trex(canvas, spritePos) {\n  this.canvas = canvas;\n  this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n  this.spritePos = spritePos;\n  this.xPos = 0;\n  this.yPos = 0;\n  this.xInitialPos = 0;\n  // Position when on the ground.\n  this.groundYPos = 0;\n  this.currentFrame = 0;\n  this.currentAnimFrames = [];\n  this.blinkDelay = 0;\n  this.blinkCount = 0;\n  this.animStartTime = 0;\n  this.timer = 0;\n  this.msPerFrame = 1000 / FPS;\n  this.config = Object.assign(Trex.config, Trex.normalJumpConfig);\n  // Current status.\n  this.status = Trex.status.WAITING;\n  this.jumping = false;\n  this.ducking = false;\n  this.jumpVelocity = 0;\n  this.reachedMinHeight = false;\n  this.speedDrop = false;\n  this.jumpCount = 0;\n  this.jumpspotX = 0;\n  this.altGameModeEnabled = false;\n  this.flashing = false;\n\n  this.init();\n}\n\n/**\n * T-rex player config.\n */\nTrex.config = {\n  DROP_VELOCITY: -5,\n  FLASH_OFF: 175,\n  FLASH_ON: 100,\n  HEIGHT: 47,\n  HEIGHT_DUCK: 25,\n  INTRO_DURATION: 1500,\n  SPEED_DROP_COEFFICIENT: 3,\n  SPRITE_WIDTH: 262,\n  START_X_POS: 50,\n  WIDTH: 44,\n  WIDTH_DUCK: 59,\n};\n\nTrex.slowJumpConfig = {\n  GRAVITY: 0.25,\n  MAX_JUMP_HEIGHT: 50,\n  MIN_JUMP_HEIGHT: 45,\n  INITIAL_JUMP_VELOCITY: -20,\n};\n\nTrex.normalJumpConfig = {\n  GRAVITY: 0.6,\n  MAX_JUMP_HEIGHT: 30,\n  MIN_JUMP_HEIGHT: 30,\n  INITIAL_JUMP_VELOCITY: -10,\n};\n\n/**\n * Used in collision detection.\n * @enum {Array<CollisionBox>}\n */\nTrex.collisionBoxes = {\n  DUCKING: [new CollisionBox(1, 18, 55, 25)],\n  RUNNING: [\n    new CollisionBox(22, 0, 17, 16),\n    new CollisionBox(1, 18, 30, 9),\n    new CollisionBox(10, 35, 14, 8),\n    new CollisionBox(1, 24, 29, 5),\n    new CollisionBox(5, 30, 21, 4),\n    new CollisionBox(9, 34, 15, 4),\n  ],\n};\n\n/**\n * Animation states.\n * @enum {string}\n */\nTrex.status = {\n  CRASHED: 'CRASHED',\n  DUCKING: 'DUCKING',\n  JUMPING: 'JUMPING',\n  RUNNING: 'RUNNING',\n  WAITING: 'WAITING',\n};\n\n/**\n * Blinking coefficient.\n * @const\n */\nTrex.BLINK_TIMING = 7000;\n\n/**\n * Animation config for different states.\n * @enum {Object}\n */\nTrex.animFrames = {\n  WAITING: {\n    frames: [44, 0],\n    msPerFrame: 1000 / 3,\n  },\n  RUNNING: {\n    frames: [88, 132],\n    msPerFrame: 1000 / 12,\n  },\n  CRASHED: {\n    frames: [220],\n    msPerFrame: 1000 / 60,\n  },\n  JUMPING: {\n    frames: [0],\n    msPerFrame: 1000 / 60,\n  },\n  DUCKING: {\n    frames: [264, 323],\n    msPerFrame: 1000 / 8,\n  },\n};\n\nTrex.prototype = {\n  /**\n   * T-rex player initialiser.\n   * Sets the t-rex to blink at random intervals.\n   */\n  init() {\n    this.groundYPos =\n      Runner.defaultDimensions.HEIGHT - this.config.HEIGHT - Runner.config.BOTTOM_PAD;\n    this.yPos = this.groundYPos;\n    this.minJumpHeight = this.groundYPos - this.config.MIN_JUMP_HEIGHT;\n\n    this.draw(0, 0);\n    this.update(0, Trex.status.WAITING);\n  },\n\n  /**\n   * Assign the appropriate jump parameters based on the game speed.\n   */\n  enableSlowConfig: function () {\n    const jumpConfig = Runner.slowDown ? Trex.slowJumpConfig : Trex.normalJumpConfig;\n    Trex.config = Object.assign(Trex.config, jumpConfig);\n\n    this.adjustAltGameConfigForSlowSpeed();\n  },\n\n  /**\n   * Enables the alternative game. Redefines the dino config.\n   * @param {Object} spritePos New positioning within image sprite.\n   */\n  enableAltGameMode: function (spritePos) {\n    this.altGameModeEnabled = true;\n    this.spritePos = spritePos;\n    const spriteDefinition = Runner.spriteDefinition['TREX'];\n\n    // Update animation frames.\n    Trex.animFrames.RUNNING.frames = [spriteDefinition.RUNNING_1.x, spriteDefinition.RUNNING_2.x];\n    Trex.animFrames.CRASHED.frames = [spriteDefinition.CRASHED.x];\n\n    if (typeof spriteDefinition.JUMPING.x == 'object') {\n      Trex.animFrames.JUMPING.frames = spriteDefinition.JUMPING.x;\n    } else {\n      Trex.animFrames.JUMPING.frames = [spriteDefinition.JUMPING.x];\n    }\n\n    Trex.animFrames.DUCKING.frames = [spriteDefinition.RUNNING_1.x, spriteDefinition.RUNNING_2.x];\n\n    // Update Trex config\n    Trex.config.GRAVITY = spriteDefinition.GRAVITY || Trex.config.GRAVITY;\n    (Trex.config.HEIGHT = spriteDefinition.RUNNING_1.h),\n      (Trex.config.INITIAL_JUMP_VELOCITY = spriteDefinition.INITIAL_JUMP_VELOCITY);\n    Trex.config.MAX_JUMP_HEIGHT = spriteDefinition.MAX_JUMP_HEIGHT;\n    Trex.config.MIN_JUMP_HEIGHT = spriteDefinition.MIN_JUMP_HEIGHT;\n    Trex.config.WIDTH = spriteDefinition.RUNNING_1.w;\n    Trex.config.WIDTH_JUMP = spriteDefinition.JUMPING.w;\n    Trex.config.INVERT_JUMP = spriteDefinition.INVERT_JUMP;\n\n    this.adjustAltGameConfigForSlowSpeed(spriteDefinition.GRAVITY);\n    this.config = Trex.config;\n\n    // Adjust bottom horizon placement.\n    this.groundYPos =\n      Runner.defaultDimensions.HEIGHT - this.config.HEIGHT - Runner.spriteDefinition['BOTTOM_PAD'];\n    this.yPos = this.groundYPos;\n    this.reset();\n  },\n\n  /**\n   * Slow speeds adjustments for the alt game modes.\n   * @param {number=} opt_gravityValue\n   */\n  adjustAltGameConfigForSlowSpeed: function (opt_gravityValue) {\n    if (Runner.slowDown) {\n      if (opt_gravityValue) {\n        Trex.config.GRAVITY = opt_gravityValue / 1.5;\n      }\n      Trex.config.MIN_JUMP_HEIGHT *= 1.5;\n      Trex.config.MAX_JUMP_HEIGHT *= 1.5;\n      Trex.config.INITIAL_JUMP_VELOCITY = Trex.config.INITIAL_JUMP_VELOCITY * 1.5;\n    }\n  },\n\n  /**\n   * Setter whether dino is flashing.\n   * @param {boolean} status\n   */\n  setFlashing: function (status) {\n    this.flashing = status;\n  },\n\n  /**\n   * Setter for the jump velocity.\n   * The appropriate drop velocity is also set.\n   * @param {number} setting\n   */\n  setJumpVelocity(setting) {\n    this.config.INITIAL_JUMP_VELOCITY = -setting;\n    this.config.DROP_VELOCITY = -setting / 2;\n  },\n\n  /**\n   * Set the animation status.\n   * @param {!number} deltaTime\n   * @param {Trex.status=} opt_status Optional status to switch to.\n   */\n  update(deltaTime, opt_status) {\n    this.timer += deltaTime;\n\n    // Update the status.\n    if (opt_status) {\n      this.status = opt_status;\n      this.currentFrame = 0;\n      this.msPerFrame = Trex.animFrames[opt_status].msPerFrame;\n      this.currentAnimFrames = Trex.animFrames[opt_status].frames;\n\n      if (opt_status === Trex.status.WAITING) {\n        this.animStartTime = getTimeStamp();\n        this.setBlinkDelay();\n      }\n    }\n    // Game intro animation, T-rex moves in from the left.\n    if (this.playingIntro && this.xPos < this.config.START_X_POS) {\n      this.xPos += Math.round((this.config.START_X_POS / this.config.INTRO_DURATION) * deltaTime);\n      this.xInitialPos = this.xPos;\n    }\n\n    if (this.status === Trex.status.WAITING) {\n      this.blink(getTimeStamp());\n    } else {\n      this.draw(this.currentAnimFrames[this.currentFrame], 0);\n    }\n\n    // Update the frame position.\n    if (!this.flashing && this.timer >= this.msPerFrame) {\n      this.currentFrame =\n        this.currentFrame == this.currentAnimFrames.length - 1 ? 0 : this.currentFrame + 1;\n      this.timer = 0;\n    }\n\n    if (!this.altGameModeEnabled) {\n      // Speed drop becomes duck if the down key is still being pressed.\n      if (this.speedDrop && this.yPos === this.groundYPos) {\n        this.speedDrop = false;\n        this.setDuck(true);\n      }\n    }\n  },\n\n  /**\n   * Draw the t-rex to a particular position.\n   * @param {number} x\n   * @param {number} y\n   */\n  draw(x, y) {\n    let sourceX = x;\n    let sourceY = y;\n    let sourceWidth =\n      this.ducking && this.status !== Trex.status.CRASHED\n        ? this.config.WIDTH_DUCK\n        : this.config.WIDTH;\n    let sourceHeight = this.config.HEIGHT;\n    const outputHeight = sourceHeight;\n\n    let jumpOffset = Runner.spriteDefinition.TREX.JUMPING.xOffset;\n\n    // Width of sprite changes on jump.\n    if (this.altGameModeEnabled && this.jumping && this.status !== Trex.status.CRASHED) {\n      sourceWidth = this.config.WIDTH_JUMP;\n    }\n\n    if (IS_HIDPI) {\n      sourceX *= 2;\n      sourceY *= 2;\n      sourceWidth *= 2;\n      sourceHeight *= 2;\n      jumpOffset *= 2;\n    }\n\n    // Adjustments for sprite sheet position.\n    sourceX += this.spritePos.x;\n    sourceY += this.spritePos.y;\n\n    // Flashing.\n    if (this.flashing) {\n      if (this.timer < this.config.FLASH_ON) {\n        this.canvasCtx.globalAlpha = 0.5;\n      } else if (this.timer > this.config.FLASH_OFF) {\n        this.timer = 0;\n      }\n    }\n\n    // Ducking.\n    if (!this.altGameModeEnabled && this.ducking && this.status !== Trex.status.CRASHED) {\n      this.canvasCtx.drawImage(\n        Runner.imageSprite,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        this.xPos,\n        this.yPos,\n        this.config.WIDTH_DUCK,\n        outputHeight\n      );\n    } else if (this.altGameModeEnabled && this.jumping && this.status !== Trex.status.CRASHED) {\n      // Jumping with adjustments.\n      this.canvasCtx.drawImage(\n        Runner.imageSprite,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        this.xPos - jumpOffset,\n        this.yPos,\n        this.config.WIDTH_JUMP,\n        outputHeight\n      );\n    } else {\n      // Crashed whilst ducking. Trex is standing up so needs adjustment.\n      if (this.ducking && this.status === Trex.status.CRASHED) {\n        this.xPos++;\n      }\n      // Standing / running\n      this.canvasCtx.drawImage(\n        Runner.imageSprite,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        this.xPos,\n        this.yPos,\n        this.config.WIDTH,\n        outputHeight\n      );\n    }\n    this.canvasCtx.globalAlpha = 1;\n  },\n\n  /**\n   * Sets a random time for the blink to happen.\n   */\n  setBlinkDelay() {\n    this.blinkDelay = Math.ceil(Math.random() * Trex.BLINK_TIMING);\n  },\n\n  /**\n   * Make t-rex blink at random intervals.\n   * @param {number} time Current time in milliseconds.\n   */\n  blink(time) {\n    const deltaTime = time - this.animStartTime;\n\n    if (deltaTime >= this.blinkDelay) {\n      this.draw(this.currentAnimFrames[this.currentFrame], 0);\n\n      if (this.currentFrame === 1) {\n        // Set new random delay to blink.\n        this.setBlinkDelay();\n        this.animStartTime = time;\n        this.blinkCount++;\n      }\n    }\n  },\n\n  /**\n   * Initialise a jump.\n   * @param {number} speed\n   */\n  startJump(speed) {\n    if (!this.jumping) {\n      this.update(0, Trex.status.JUMPING);\n      // Tweak the jump velocity based on the speed.\n      this.jumpVelocity = this.config.INITIAL_JUMP_VELOCITY - speed / 10;\n      this.jumping = true;\n      this.reachedMinHeight = false;\n      this.speedDrop = false;\n\n      if (this.config.INVERT_JUMP) {\n        this.minJumpHeight = this.groundYPos + this.config.MIN_JUMP_HEIGHT;\n      }\n    }\n  },\n\n  /**\n   * Jump is complete, falling down.\n   */\n  endJump() {\n    if (this.reachedMinHeight && this.jumpVelocity < this.config.DROP_VELOCITY) {\n      this.jumpVelocity = this.config.DROP_VELOCITY;\n    }\n  },\n\n  /**\n   * Update frame for a jump.\n   * @param {number} deltaTime\n   */\n  updateJump(deltaTime) {\n    const msPerFrame = Trex.animFrames[this.status].msPerFrame;\n    const framesElapsed = deltaTime / msPerFrame;\n\n    // Speed drop makes Trex fall faster.\n    if (this.speedDrop) {\n      this.yPos += Math.round(\n        this.jumpVelocity * this.config.SPEED_DROP_COEFFICIENT * framesElapsed\n      );\n    } else if (this.config.INVERT_JUMP) {\n      this.yPos -= Math.round(this.jumpVelocity * framesElapsed);\n    } else {\n      this.yPos += Math.round(this.jumpVelocity * framesElapsed);\n    }\n\n    this.jumpVelocity += this.config.GRAVITY * framesElapsed;\n\n    // Minimum height has been reached.\n    if (\n      (this.config.INVERT_JUMP && this.yPos > this.minJumpHeight) ||\n      (!this.config.INVERT_JUMP && this.yPos < this.minJumpHeight) ||\n      this.speedDrop\n    ) {\n      this.reachedMinHeight = true;\n    }\n\n    // Reached max height.\n    if (\n      (this.config.INVERT_JUMP && this.yPos > -this.config.MAX_JUMP_HEIGHT) ||\n      (!this.config.INVERT_JUMP && this.yPos < this.config.MAX_JUMP_HEIGHT) ||\n      this.speedDrop\n    ) {\n      this.endJump();\n    }\n\n    // Back down at ground level. Jump completed.\n    if (\n      (this.config.INVERT_JUMP && this.yPos) < this.groundYPos ||\n      (!this.config.INVERT_JUMP && this.yPos) > this.groundYPos\n    ) {\n      this.reset();\n      this.jumpCount++;\n\n      if (Runner.audioCues) {\n        Runner.generatedSoundFx.loopFootSteps();\n      }\n    }\n  },\n\n  /**\n   * Set the speed drop. Immediately cancels the current jump.\n   */\n  setSpeedDrop() {\n    this.speedDrop = true;\n    this.jumpVelocity = 1;\n  },\n\n  /**\n   * @param {boolean} isDucking\n   */\n  setDuck(isDucking) {\n    if (isDucking && this.status !== Trex.status.DUCKING) {\n      this.update(0, Trex.status.DUCKING);\n      this.ducking = true;\n    } else if (this.status === Trex.status.DUCKING) {\n      this.update(0, Trex.status.RUNNING);\n      this.ducking = false;\n    }\n  },\n\n  /**\n   * Reset the t-rex to running at start of game.\n   */\n  reset() {\n    this.xPos = this.xInitialPos;\n    this.yPos = this.groundYPos;\n    this.jumpVelocity = 0;\n    this.jumping = false;\n    this.ducking = false;\n    this.update(0, Trex.status.RUNNING);\n    this.midair = false;\n    this.speedDrop = false;\n    this.jumpCount = 0;\n  },\n};\n\n//******************************************************************************\n\n/**\n * Handles displaying the distance meter.\n * @param {!HTMLCanvasElement} canvas\n * @param {Object} spritePos Image position in sprite.\n * @param {number} canvasWidth\n * @constructor\n */\nfunction DistanceMeter(canvas, spritePos, canvasWidth) {\n  this.canvas = canvas;\n  this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n  this.image = Runner.imageSprite;\n  this.spritePos = spritePos;\n  this.x = 0;\n  this.y = 5;\n\n  this.currentDistance = 0;\n  this.maxScore = 0;\n  this.highScore = '0';\n  this.container = null;\n\n  this.digits = [];\n  this.achievement = false;\n  this.defaultString = '';\n  this.flashTimer = 0;\n  this.flashIterations = 0;\n  this.invertTrigger = false;\n  this.flashingRafId = null;\n  this.highScoreBounds = {};\n  this.highScoreFlashing = false;\n\n  this.config = DistanceMeter.config;\n  this.maxScoreUnits = this.config.MAX_DISTANCE_UNITS;\n  this.canvasWidth = canvasWidth;\n  this.init(canvasWidth);\n}\n\n/**\n * @enum {number}\n */\nDistanceMeter.dimensions = {\n  WIDTH: 10,\n  HEIGHT: 13,\n  DEST_WIDTH: 11,\n};\n\n/**\n * Y positioning of the digits in the sprite sheet.\n * X position is always 0.\n * @type {Array<number>}\n */\nDistanceMeter.yPos = [0, 13, 27, 40, 53, 67, 80, 93, 107, 120];\n\n/**\n * Distance meter config.\n * @enum {number}\n */\nDistanceMeter.config = {\n  // Number of digits.\n  MAX_DISTANCE_UNITS: 5,\n\n  // Distance that causes achievement animation.\n  ACHIEVEMENT_DISTANCE: 100,\n\n  // Used for conversion from pixel distance to a scaled unit.\n  COEFFICIENT: 0.025,\n\n  // Flash duration in milliseconds.\n  FLASH_DURATION: 1000 / 4,\n\n  // Flash iterations for achievement animation.\n  FLASH_ITERATIONS: 3,\n\n  // Padding around the high score hit area.\n  HIGH_SCORE_HIT_AREA_PADDING: 4,\n};\n\nDistanceMeter.prototype = {\n  /**\n   * Initialise the distance meter to '00000'.\n   * @param {number} width Canvas width in px.\n   */\n  init(width) {\n    let maxDistanceStr = '';\n\n    this.calcXPos(width);\n    this.maxScore = this.maxScoreUnits;\n    for (let i = 0; i < this.maxScoreUnits; i++) {\n      this.draw(i, 0);\n      this.defaultString += '0';\n      maxDistanceStr += '9';\n    }\n\n    this.maxScore = parseInt(maxDistanceStr, 10);\n  },\n\n  /**\n   * Calculate the xPos in the canvas.\n   * @param {number} canvasWidth\n   */\n  calcXPos(canvasWidth) {\n    this.x = canvasWidth - DistanceMeter.dimensions.DEST_WIDTH * (this.maxScoreUnits + 1);\n  },\n\n  /**\n   * Draw a digit to canvas.\n   * @param {number} digitPos Position of the digit.\n   * @param {number} value Digit value 0-9.\n   * @param {boolean=} opt_highScore Whether drawing the high score.\n   */\n  draw(digitPos, value, opt_highScore) {\n    let sourceWidth = DistanceMeter.dimensions.WIDTH;\n    let sourceHeight = DistanceMeter.dimensions.HEIGHT;\n    let sourceX = DistanceMeter.dimensions.WIDTH * value;\n    let sourceY = 0;\n\n    const targetX = digitPos * DistanceMeter.dimensions.DEST_WIDTH;\n    const targetY = this.y;\n    const targetWidth = DistanceMeter.dimensions.WIDTH;\n    const targetHeight = DistanceMeter.dimensions.HEIGHT;\n\n    // For high DPI we 2x source values.\n    if (IS_HIDPI) {\n      sourceWidth *= 2;\n      sourceHeight *= 2;\n      sourceX *= 2;\n    }\n\n    sourceX += this.spritePos.x;\n    sourceY += this.spritePos.y;\n\n    this.canvasCtx.save();\n\n    if (IS_RTL) {\n      if (opt_highScore) {\n        this.canvasCtx.translate(\n          this.canvasWidth - DistanceMeter.dimensions.WIDTH * (this.maxScoreUnits + 3),\n          this.y\n        );\n      } else {\n        this.canvasCtx.translate(this.canvasWidth - DistanceMeter.dimensions.WIDTH, this.y);\n      }\n      this.canvasCtx.scale(-1, 1);\n    } else {\n      const highScoreX = this.x - this.maxScoreUnits * 2 * DistanceMeter.dimensions.WIDTH;\n      if (opt_highScore) {\n        this.canvasCtx.translate(highScoreX, this.y);\n      } else {\n        this.canvasCtx.translate(this.x, this.y);\n      }\n    }\n\n    this.canvasCtx.drawImage(\n      this.image,\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      targetX,\n      targetY,\n      targetWidth,\n      targetHeight\n    );\n\n    this.canvasCtx.restore();\n  },\n\n  /**\n   * Covert pixel distance to a 'real' distance.\n   * @param {number} distance Pixel distance ran.\n   * @return {number} The 'real' distance ran.\n   */\n  getActualDistance(distance) {\n    return distance ? Math.round(distance * this.config.COEFFICIENT) : 0;\n  },\n\n  /**\n   * Update the distance meter.\n   * @param {number} distance\n   * @param {number} deltaTime\n   * @return {boolean} Whether the achievement sound fx should be played.\n   */\n  update(deltaTime, distance) {\n    let paint = true;\n    let playSound = false;\n\n    if (!this.achievement) {\n      distance = this.getActualDistance(distance);\n      // Score has gone beyond the initial digit count.\n      if (distance > this.maxScore && this.maxScoreUnits == this.config.MAX_DISTANCE_UNITS) {\n        this.maxScoreUnits++;\n        this.maxScore = parseInt(this.maxScore + '9', 10);\n      } else {\n        this.distance = 0;\n      }\n\n      if (distance > 0) {\n        // Achievement unlocked.\n        if (distance % this.config.ACHIEVEMENT_DISTANCE === 0) {\n          // Flash score and play sound.\n          this.achievement = true;\n          this.flashTimer = 0;\n          playSound = true;\n        }\n\n        // Create a string representation of the distance with leading 0.\n        const distanceStr = (this.defaultString + distance).substr(-this.maxScoreUnits);\n        this.digits = distanceStr.split('');\n      } else {\n        this.digits = this.defaultString.split('');\n      }\n    } else {\n      // Control flashing of the score on reaching achievement.\n      if (this.flashIterations <= this.config.FLASH_ITERATIONS) {\n        this.flashTimer += deltaTime;\n\n        if (this.flashTimer < this.config.FLASH_DURATION) {\n          paint = false;\n        } else if (this.flashTimer > this.config.FLASH_DURATION * 2) {\n          this.flashTimer = 0;\n          this.flashIterations++;\n        }\n      } else {\n        this.achievement = false;\n        this.flashIterations = 0;\n        this.flashTimer = 0;\n      }\n    }\n\n    // Draw the digits if not flashing.\n    if (paint) {\n      for (let i = this.digits.length - 1; i >= 0; i--) {\n        this.draw(i, parseInt(this.digits[i], 10));\n      }\n    }\n\n    this.drawHighScore();\n    return playSound;\n  },\n\n  /**\n   * Draw the high score.\n   */\n  drawHighScore() {\n    if (parseInt(this.highScore, 10) > 0) {\n      this.canvasCtx.save();\n      this.canvasCtx.globalAlpha = 0.8;\n      for (let i = this.highScore.length - 1; i >= 0; i--) {\n        this.draw(i, parseInt(this.highScore[i], 10), true);\n      }\n      this.canvasCtx.restore();\n    }\n  },\n\n  /**\n   * Set the highscore as a array string.\n   * Position of char in the sprite: H - 10, I - 11.\n   * @param {number} distance Distance ran in pixels.\n   */\n  setHighScore(distance) {\n    distance = this.getActualDistance(distance);\n    const highScoreStr = (this.defaultString + distance).substr(-this.maxScoreUnits);\n\n    this.highScore = ['10', '11', ''].concat(highScoreStr.split(''));\n  },\n\n  /**\n   * Whether a clicked is in the high score area.\n   * @param {Event} e Event object.\n   * @return {boolean} Whether the click was in the high score bounds.\n   */\n  hasClickedOnHighScore(e) {\n    let x = 0;\n    let y = 0;\n\n    if (e.touches) {\n      // Bounds for touch differ from pointer.\n      const canvasBounds = this.canvas.getBoundingClientRect();\n      x = e.touches[0].clientX - canvasBounds.left;\n      y = e.touches[0].clientY - canvasBounds.top;\n    } else {\n      x = e.offsetX;\n      y = e.offsetY;\n    }\n\n    this.highScoreBounds = this.getHighScoreBounds();\n    return (\n      x >= this.highScoreBounds.x &&\n      x <= this.highScoreBounds.x + this.highScoreBounds.width &&\n      y >= this.highScoreBounds.y &&\n      y <= this.highScoreBounds.y + this.highScoreBounds.height\n    );\n  },\n\n  /**\n   * Get the bounding box for the high score.\n   * @return {Object} Object with x, y, width and height properties.\n   */\n  getHighScoreBounds() {\n    return {\n      x:\n        this.x -\n        this.maxScoreUnits * 2 * DistanceMeter.dimensions.WIDTH -\n        DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING,\n      y: this.y,\n      width:\n        DistanceMeter.dimensions.WIDTH * (this.highScore.length + 1) +\n        DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING,\n      height:\n        DistanceMeter.dimensions.HEIGHT + DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING * 2,\n    };\n  },\n\n  /**\n   * Animate flashing the high score to indicate ready for resetting.\n   * The flashing stops following this.config.FLASH_ITERATIONS x 2 flashes.\n   */\n  flashHighScore() {\n    const now = getTimeStamp();\n    const deltaTime = now - (this.frameTimeStamp || now);\n    let paint = true;\n    this.frameTimeStamp = now;\n\n    // Reached the max number of flashes.\n    if (this.flashIterations > this.config.FLASH_ITERATIONS * 2) {\n      this.cancelHighScoreFlashing();\n      return;\n    }\n\n    this.flashTimer += deltaTime;\n\n    if (this.flashTimer < this.config.FLASH_DURATION) {\n      paint = false;\n    } else if (this.flashTimer > this.config.FLASH_DURATION * 2) {\n      this.flashTimer = 0;\n      this.flashIterations++;\n    }\n\n    if (paint) {\n      this.drawHighScore();\n    } else {\n      this.clearHighScoreBounds();\n    }\n    // Frame update.\n    this.flashingRafId = requestAnimationFrame(this.flashHighScore.bind(this));\n  },\n\n  /**\n   * Draw empty rectangle over high score.\n   */\n  clearHighScoreBounds() {\n    this.canvasCtx.save();\n    this.canvasCtx.fillStyle = '#fff';\n    this.canvasCtx.rect(\n      this.highScoreBounds.x,\n      this.highScoreBounds.y,\n      this.highScoreBounds.width,\n      this.highScoreBounds.height\n    );\n    this.canvasCtx.fill();\n    this.canvasCtx.restore();\n  },\n\n  /**\n   * Starts the flashing of the high score.\n   */\n  startHighScoreFlashing() {\n    this.highScoreFlashing = true;\n    this.flashHighScore();\n  },\n\n  /**\n   * Whether high score is flashing.\n   * @return {boolean}\n   */\n  isHighScoreFlashing() {\n    return this.highScoreFlashing;\n  },\n\n  /**\n   * Stop flashing the high score.\n   */\n  cancelHighScoreFlashing() {\n    if (this.flashingRafId) {\n      cancelAnimationFrame(this.flashingRafId);\n    }\n    this.flashIterations = 0;\n    this.flashTimer = 0;\n    this.highScoreFlashing = false;\n    this.clearHighScoreBounds();\n    this.drawHighScore();\n  },\n\n  /**\n   * Clear the high score.\n   */\n  resetHighScore() {\n    this.setHighScore(0);\n    this.cancelHighScoreFlashing();\n  },\n\n  /**\n   * Reset the distance meter back to '00000'.\n   */\n  reset() {\n    this.update(0, 0);\n    this.achievement = false;\n  },\n};\n\n//******************************************************************************\n\n/**\n * Cloud background item.\n * Similar to an obstacle object but without collision boxes.\n * @param {HTMLCanvasElement} canvas Canvas element.\n * @param {Object} spritePos Position of image in sprite.\n * @param {number} containerWidth\n * @constructor\n */\nfunction Cloud(canvas, spritePos, containerWidth) {\n  this.canvas = canvas;\n  this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\n  this.spritePos = spritePos;\n  this.containerWidth = containerWidth;\n  this.xPos = containerWidth;\n  this.yPos = 0;\n  this.remove = false;\n  this.gap = getRandomNum(Cloud.config.MIN_CLOUD_GAP, Cloud.config.MAX_CLOUD_GAP);\n\n  this.init();\n}\n\n/**\n * Cloud object config.\n * @enum {number}\n */\nCloud.config = {\n  HEIGHT: 14,\n  MAX_CLOUD_GAP: 400,\n  MAX_SKY_LEVEL: 30,\n  MIN_CLOUD_GAP: 100,\n  MIN_SKY_LEVEL: 71,\n  WIDTH: 46,\n};\n\nCloud.prototype = {\n  /**\n   * Initialise the cloud. Sets the Cloud height.\n   */\n  init() {\n    this.yPos = getRandomNum(Cloud.config.MAX_SKY_LEVEL, Cloud.config.MIN_SKY_LEVEL);\n    this.draw();\n  },\n\n  /**\n   * Draw the cloud.\n   */\n  draw() {\n    this.canvasCtx.save();\n    let sourceWidth = Cloud.config.WIDTH;\n    let sourceHeight = Cloud.config.HEIGHT;\n    const outputWidth = sourceWidth;\n    const outputHeight = sourceHeight;\n    if (IS_HIDPI) {\n      sourceWidth = sourceWidth * 2;\n      sourceHeight = sourceHeight * 2;\n    }\n\n    this.canvasCtx.drawImage(\n      Runner.imageSprite,\n      this.spritePos.x,\n      this.spritePos.y,\n      sourceWidth,\n      sourceHeight,\n      this.xPos,\n      this.yPos,\n      outputWidth,\n      outputHeight\n    );\n\n    this.canvasCtx.restore();\n  },\n\n  /**\n   * Update the cloud position.\n   * @param {number} speed\n   */\n  update(speed) {\n    if (!this.remove) {\n      this.xPos -= Math.ceil(speed);\n      this.draw();\n\n      // Mark as removeable if no longer in the canvas.\n      if (!this.isVisible()) {\n        this.remove = true;\n      }\n    }\n  },\n\n  /**\n   * Check if the cloud is visible on the stage.\n   * @return {boolean}\n   */\n  isVisible() {\n    return this.xPos + Cloud.config.WIDTH > 0;\n  },\n};\n\n/**\n * Background item.\n * Similar to cloud, without random y position.\n * @param {HTMLCanvasElement} canvas Canvas element.\n * @param {Object} spritePos Position of image in sprite.\n * @param {number} containerWidth\n * @param {string} type Element type.\n * @constructor\n */\nfunction BackgroundEl(canvas, spritePos, containerWidth, type) {\n  this.canvas = canvas;\n  this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\n  this.spritePos = spritePos;\n  this.containerWidth = containerWidth;\n  this.xPos = containerWidth;\n  this.yPos = 0;\n  this.remove = false;\n  this.type = type;\n  this.gap = getRandomNum(BackgroundEl.config.MIN_GAP, BackgroundEl.config.MAX_GAP);\n  this.animTimer = 0;\n  this.switchFrames = false;\n\n  this.spriteConfig = {};\n  this.init();\n}\n\n/**\n * Background element object config.\n * Real values assigned when game type changes.\n * @enum {number}\n */\nBackgroundEl.config = {\n  MAX_BG_ELS: 0,\n  MAX_GAP: 0,\n  MIN_GAP: 0,\n  POS: 0,\n  SPEED: 0,\n  Y_POS: 0,\n  MS_PER_FRAME: 0, // only needed when BACKGROUND_EL.FIXED is true\n};\n\nBackgroundEl.prototype = {\n  /**\n   * Initialise the element setting the y position.\n   */\n  init() {\n    this.spriteConfig = Runner.spriteDefinition.BACKGROUND_EL[this.type];\n    if (this.spriteConfig.FIXED) {\n      this.xPos = this.spriteConfig.FIXED_X_POS;\n    }\n    this.yPos = BackgroundEl.config.Y_POS - this.spriteConfig.HEIGHT + this.spriteConfig.OFFSET;\n    this.draw();\n  },\n\n  /**\n   * Draw the element.\n   */\n  draw() {\n    this.canvasCtx.save();\n    let sourceWidth = this.spriteConfig.WIDTH;\n    let sourceHeight = this.spriteConfig.HEIGHT;\n    let sourceX = this.spriteConfig.X_POS;\n    const outputWidth = sourceWidth;\n    const outputHeight = sourceHeight;\n\n    if (IS_HIDPI) {\n      sourceWidth *= 2;\n      sourceHeight *= 2;\n      sourceX *= 2;\n    }\n\n    this.canvasCtx.drawImage(\n      Runner.imageSprite,\n      sourceX,\n      this.spritePos.y,\n      sourceWidth,\n      sourceHeight,\n      this.xPos,\n      this.yPos,\n      outputWidth,\n      outputHeight\n    );\n\n    this.canvasCtx.restore();\n  },\n\n  /**\n   * Update the background element position.\n   * @param {number} speed\n   */\n  update(speed) {\n    if (!this.remove) {\n      if (this.spriteConfig.FIXED) {\n        this.animTimer += speed;\n        if (this.animTimer > BackgroundEl.config.MS_PER_FRAME) {\n          this.animTimer = 0;\n          this.switchFrames = !this.switchFrames;\n        }\n\n        if (this.spriteConfig.FIXED_Y_POS_1 && this.spriteConfig.FIXED_Y_POS_2) {\n          this.yPos = this.switchFrames\n            ? this.spriteConfig.FIXED_Y_POS_1\n            : this.spriteConfig.FIXED_Y_POS_2;\n        }\n      } else {\n        // Fixed speed, regardless of actual game speed.\n        this.xPos -= BackgroundEl.config.SPEED;\n      }\n      this.draw();\n\n      // Mark as removable if no longer in the canvas.\n      if (!this.isVisible()) {\n        this.remove = true;\n      }\n    }\n  },\n\n  /**\n   * Check if the element is visible on the stage.\n   * @return {boolean}\n   */\n  isVisible() {\n    return this.xPos + this.spriteConfig.WIDTH > 0;\n  },\n};\n\n//******************************************************************************\n\n/**\n * Nightmode shows a moon and stars on the horizon.\n * @param {HTMLCanvasElement} canvas\n * @param {number} spritePos\n * @param {number} containerWidth\n * @constructor\n */\nfunction NightMode(canvas, spritePos, containerWidth) {\n  this.spritePos = spritePos;\n  this.canvas = canvas;\n  this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n  this.xPos = containerWidth - 50;\n  this.yPos = 30;\n  this.currentPhase = 0;\n  this.opacity = 0;\n  this.containerWidth = containerWidth;\n  this.stars = [];\n  this.drawStars = false;\n  this.placeStars();\n}\n\n/**\n * @enum {number}\n */\nNightMode.config = {\n  FADE_SPEED: 0.035,\n  HEIGHT: 40,\n  MOON_SPEED: 0.25,\n  NUM_STARS: 2,\n  STAR_SIZE: 9,\n  STAR_SPEED: 0.3,\n  STAR_MAX_Y: 70,\n  WIDTH: 20,\n};\n\nNightMode.phases = [140, 120, 100, 60, 40, 20, 0];\n\nNightMode.prototype = {\n  /**\n   * Update moving moon, changing phases.\n   * @param {boolean} activated Whether night mode is activated.\n   */\n  update(activated) {\n    // Moon phase.\n    if (activated && this.opacity === 0) {\n      this.currentPhase++;\n\n      if (this.currentPhase >= NightMode.phases.length) {\n        this.currentPhase = 0;\n      }\n    }\n\n    // Fade in / out.\n    if (activated && (this.opacity < 1 || this.opacity === 0)) {\n      this.opacity += NightMode.config.FADE_SPEED;\n    } else if (this.opacity > 0) {\n      this.opacity -= NightMode.config.FADE_SPEED;\n    }\n\n    // Set moon positioning.\n    if (this.opacity > 0) {\n      this.xPos = this.updateXPos(this.xPos, NightMode.config.MOON_SPEED);\n\n      // Update stars.\n      if (this.drawStars) {\n        for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\n          this.stars[i].x = this.updateXPos(this.stars[i].x, NightMode.config.STAR_SPEED);\n        }\n      }\n      this.draw();\n    } else {\n      this.opacity = 0;\n      this.placeStars();\n    }\n    this.drawStars = true;\n  },\n\n  updateXPos(currentPos, speed) {\n    if (currentPos < -NightMode.config.WIDTH) {\n      currentPos = this.containerWidth;\n    } else {\n      currentPos -= speed;\n    }\n    return currentPos;\n  },\n\n  draw() {\n    let moonSourceWidth =\n      this.currentPhase === 3 ? NightMode.config.WIDTH * 2 : NightMode.config.WIDTH;\n    let moonSourceHeight = NightMode.config.HEIGHT;\n    let moonSourceX = this.spritePos.x + NightMode.phases[this.currentPhase];\n    const moonOutputWidth = moonSourceWidth;\n    let starSize = NightMode.config.STAR_SIZE;\n    let starSourceX = Runner.spriteDefinitionByType.original.LDPI.STAR.x;\n\n    if (IS_HIDPI) {\n      moonSourceWidth *= 2;\n      moonSourceHeight *= 2;\n      moonSourceX = this.spritePos.x + NightMode.phases[this.currentPhase] * 2;\n      starSize *= 2;\n      starSourceX = Runner.spriteDefinitionByType.original.HDPI.STAR.x;\n    }\n\n    this.canvasCtx.save();\n    this.canvasCtx.globalAlpha = this.opacity;\n\n    // Stars.\n    if (this.drawStars) {\n      for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\n        this.canvasCtx.drawImage(\n          Runner.origImageSprite,\n          starSourceX,\n          this.stars[i].sourceY,\n          starSize,\n          starSize,\n          Math.round(this.stars[i].x),\n          this.stars[i].y,\n          NightMode.config.STAR_SIZE,\n          NightMode.config.STAR_SIZE\n        );\n      }\n    }\n\n    // Moon.\n    this.canvasCtx.drawImage(\n      Runner.origImageSprite,\n      moonSourceX,\n      this.spritePos.y,\n      moonSourceWidth,\n      moonSourceHeight,\n      Math.round(this.xPos),\n      this.yPos,\n      moonOutputWidth,\n      NightMode.config.HEIGHT\n    );\n\n    this.canvasCtx.globalAlpha = 1;\n    this.canvasCtx.restore();\n  },\n\n  // Do star placement.\n  placeStars() {\n    const segmentSize = Math.round(this.containerWidth / NightMode.config.NUM_STARS);\n\n    for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\n      this.stars[i] = {};\n      this.stars[i].x = getRandomNum(segmentSize * i, segmentSize * (i + 1));\n      this.stars[i].y = getRandomNum(0, NightMode.config.STAR_MAX_Y);\n\n      if (IS_HIDPI) {\n        this.stars[i].sourceY =\n          Runner.spriteDefinitionByType.original.HDPI.STAR.y + NightMode.config.STAR_SIZE * 2 * i;\n      } else {\n        this.stars[i].sourceY =\n          Runner.spriteDefinitionByType.original.LDPI.STAR.y + NightMode.config.STAR_SIZE * i;\n      }\n    }\n  },\n\n  reset() {\n    this.currentPhase = 0;\n    this.opacity = 0;\n    this.update(false);\n  },\n};\n\n//******************************************************************************\n\n/**\n * Horizon Line.\n * Consists of two connecting lines. Randomly assigns a flat / bumpy horizon.\n * @param {HTMLCanvasElement} canvas\n * @param {Object} lineConfig Configuration object.\n * @constructor\n */\nfunction HorizonLine(canvas, lineConfig) {\n  let sourceX = lineConfig.SOURCE_X;\n  let sourceY = lineConfig.SOURCE_Y;\n\n  if (IS_HIDPI) {\n    sourceX *= 2;\n    sourceY *= 2;\n  }\n\n  this.spritePos = { x: sourceX, y: sourceY };\n  this.canvas = canvas;\n  this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n  this.sourceDimensions = {};\n  this.dimensions = lineConfig;\n\n  this.sourceXPos = [this.spritePos.x, this.spritePos.x + this.dimensions.WIDTH];\n  this.xPos = [];\n  this.yPos = 0;\n  this.bumpThreshold = 0.5;\n\n  this.setSourceDimensions(lineConfig);\n  this.draw();\n}\n\n/**\n * Horizon line dimensions.\n * @enum {number}\n */\nHorizonLine.dimensions = {\n  WIDTH: 600,\n  HEIGHT: 12,\n  YPOS: 127,\n};\n\nHorizonLine.prototype = {\n  /**\n   * Set the source dimensions of the horizon line.\n   */\n  setSourceDimensions(newDimensions) {\n    for (const dimension in newDimensions) {\n      if (dimension !== 'SOURCE_X' && dimension !== 'SOURCE_Y') {\n        if (IS_HIDPI) {\n          if (dimension !== 'YPOS') {\n            this.sourceDimensions[dimension] = newDimensions[dimension] * 2;\n          }\n        } else {\n          this.sourceDimensions[dimension] = newDimensions[dimension];\n        }\n        this.dimensions[dimension] = newDimensions[dimension];\n      }\n    }\n\n    this.xPos = [0, newDimensions.WIDTH];\n    this.yPos = newDimensions.YPOS;\n  },\n\n  /**\n   * Return the crop x position of a type.\n   */\n  getRandomType() {\n    return Math.random() > this.bumpThreshold ? this.dimensions.WIDTH : 0;\n  },\n\n  /**\n   * Draw the horizon line.\n   */\n  draw() {\n    this.canvasCtx.drawImage(\n      Runner.imageSprite,\n      this.sourceXPos[0],\n      this.spritePos.y,\n      this.sourceDimensions.WIDTH,\n      this.sourceDimensions.HEIGHT,\n      this.xPos[0],\n      this.yPos,\n      this.dimensions.WIDTH,\n      this.dimensions.HEIGHT\n    );\n\n    this.canvasCtx.drawImage(\n      Runner.imageSprite,\n      this.sourceXPos[1],\n      this.spritePos.y,\n      this.sourceDimensions.WIDTH,\n      this.sourceDimensions.HEIGHT,\n      this.xPos[1],\n      this.yPos,\n      this.dimensions.WIDTH,\n      this.dimensions.HEIGHT\n    );\n  },\n\n  /**\n   * Update the x position of an individual piece of the line.\n   * @param {number} pos Line position.\n   * @param {number} increment\n   */\n  updateXPos(pos, increment) {\n    const line1 = pos;\n    const line2 = pos === 0 ? 1 : 0;\n\n    this.xPos[line1] -= increment;\n    this.xPos[line2] = this.xPos[line1] + this.dimensions.WIDTH;\n\n    if (this.xPos[line1] <= -this.dimensions.WIDTH) {\n      this.xPos[line1] += this.dimensions.WIDTH * 2;\n      this.xPos[line2] = this.xPos[line1] - this.dimensions.WIDTH;\n      this.sourceXPos[line1] = this.getRandomType() + this.spritePos.x;\n    }\n  },\n\n  /**\n   * Update the horizon line.\n   * @param {number} deltaTime\n   * @param {number} speed\n   */\n  update(deltaTime, speed) {\n    const increment = Math.floor(speed * (FPS / 1000) * deltaTime);\n\n    if (this.xPos[0] <= 0) {\n      this.updateXPos(0, increment);\n    } else {\n      this.updateXPos(1, increment);\n    }\n    this.draw();\n  },\n\n  /**\n   * Reset horizon to the starting position.\n   */\n  reset() {\n    this.xPos[0] = 0;\n    this.xPos[1] = this.dimensions.WIDTH;\n  },\n};\n\n//******************************************************************************\n\n/**\n * Horizon background class.\n * @param {HTMLCanvasElement} canvas\n * @param {Object} spritePos Sprite positioning.\n * @param {Object} dimensions Canvas dimensions.\n * @param {number} gapCoefficient\n * @constructor\n */\nfunction Horizon(canvas, spritePos, dimensions, gapCoefficient) {\n  this.canvas = canvas;\n  this.canvasCtx = /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\n  this.config = Horizon.config;\n  this.dimensions = dimensions;\n  this.gapCoefficient = gapCoefficient;\n  this.obstacles = [];\n  this.obstacleHistory = [];\n  this.horizonOffsets = [0, 0];\n  this.cloudFrequency = this.config.CLOUD_FREQUENCY;\n  this.spritePos = spritePos;\n  this.nightMode = null;\n  this.altGameModeActive = false;\n\n  // Cloud\n  this.clouds = [];\n  this.cloudSpeed = this.config.BG_CLOUD_SPEED;\n\n  // Background elements\n  this.backgroundEls = [];\n  this.lastEl = null;\n  this.backgroundSpeed = this.config.BG_CLOUD_SPEED;\n\n  // Horizon\n  this.horizonLine = null;\n  this.horizonLines = [];\n  this.init();\n}\n\n/**\n * Horizon config.\n * @enum {number}\n */\nHorizon.config = {\n  BG_CLOUD_SPEED: 0.2,\n  BUMPY_THRESHOLD: 0.3,\n  CLOUD_FREQUENCY: 0.5,\n  HORIZON_HEIGHT: 16,\n  MAX_CLOUDS: 6,\n};\n\nHorizon.prototype = {\n  /**\n   * Initialise the horizon. Just add the line and a cloud. No obstacles.\n   */\n  init() {\n    Obstacle.types = Runner.spriteDefinitionByType.original.OBSTACLES;\n    this.addCloud();\n    // Multiple Horizon lines\n    for (let i = 0; i < Runner.spriteDefinition.LINES.length; i++) {\n      this.horizonLines.push(new HorizonLine(this.canvas, Runner.spriteDefinition.LINES[i]));\n    }\n\n    this.nightMode = new NightMode(this.canvas, this.spritePos.MOON, this.dimensions.WIDTH);\n  },\n\n  /**\n   * Update obstacle definitions based on the speed of the game.\n   */\n  adjustObstacleSpeed: function () {\n    for (let i = 0; i < Obstacle.types.length; i++) {\n      if (Runner.slowDown) {\n        Obstacle.types[i].multipleSpeed = Obstacle.types[i].multipleSpeed / 2;\n        Obstacle.types[i].minGap *= 1.5;\n        Obstacle.types[i].minSpeed = Obstacle.types[i].minSpeed / 2;\n\n        // Convert variable y position obstacles to fixed.\n        if (typeof Obstacle.types[i].yPos == 'object') {\n          Obstacle.types[i].yPos = Obstacle.types[i].yPos[0];\n          Obstacle.types[i].yPosMobile = Obstacle.types[i].yPos[0];\n        }\n      }\n    }\n  },\n\n  /**\n   * Update sprites to correspond to change in sprite sheet.\n   * @param {number} spritePos\n   */\n  enableAltGameMode: function (spritePos) {\n    // Clear existing horizon objects.\n    this.clouds = [];\n    this.backgroundEls = [];\n\n    this.altGameModeActive = true;\n    this.spritePos = spritePos;\n\n    Obstacle.types = Runner.spriteDefinition.OBSTACLES;\n    this.adjustObstacleSpeed();\n\n    Obstacle.MAX_GAP_COEFFICIENT = Runner.spriteDefinition.MAX_GAP_COEFFICIENT;\n    Obstacle.MAX_OBSTACLE_LENGTH = Runner.spriteDefinition.MAX_OBSTACLE_LENGTH;\n\n    BackgroundEl.config = Runner.spriteDefinition.BACKGROUND_EL_CONFIG;\n\n    this.horizonLines = [];\n    for (let i = 0; i < Runner.spriteDefinition.LINES.length; i++) {\n      this.horizonLines.push(new HorizonLine(this.canvas, Runner.spriteDefinition.LINES[i]));\n    }\n    this.reset();\n  },\n\n  /**\n   * @param {number} deltaTime\n   * @param {number} currentSpeed\n   * @param {boolean} updateObstacles Used as an override to prevent\n   *     the obstacles from being updated / added. This happens in the\n   *     ease in section.\n   * @param {boolean} showNightMode Night mode activated.\n   */\n  update(deltaTime, currentSpeed, updateObstacles, showNightMode) {\n    this.runningTime += deltaTime;\n\n    if (this.altGameModeActive) {\n      this.updateBackgroundEls(deltaTime, currentSpeed);\n    }\n\n    for (let i = 0; i < this.horizonLines.length; i++) {\n      this.horizonLines[i].update(deltaTime, currentSpeed);\n    }\n\n    if (!this.altGameModeActive || Runner.spriteDefinition.HAS_CLOUDS) {\n      this.nightMode.update(showNightMode);\n      this.updateClouds(deltaTime, currentSpeed);\n    }\n\n    if (updateObstacles) {\n      this.updateObstacles(deltaTime, currentSpeed);\n    }\n  },\n\n  /**\n   * Update background element positions. Also handles creating new elements.\n   * @param {number} elSpeed\n   * @param {Array<Object>} bgElArray\n   * @param {number} maxBgEl\n   * @param {Function} bgElAddFunction\n   * @param {number} frequency\n   */\n  updateBackgroundEl(elSpeed, bgElArray, maxBgEl, bgElAddFunction, frequency) {\n    const numElements = bgElArray.length;\n\n    if (numElements) {\n      for (let i = numElements - 1; i >= 0; i--) {\n        bgElArray[i].update(elSpeed);\n      }\n\n      const lastEl = bgElArray[numElements - 1];\n\n      // Check for adding a new element.\n      if (\n        numElements < maxBgEl &&\n        this.dimensions.WIDTH - lastEl.xPos > lastEl.gap &&\n        frequency > Math.random()\n      ) {\n        bgElAddFunction();\n      }\n    } else {\n      bgElAddFunction();\n    }\n  },\n\n  /**\n   * Update the cloud positions.\n   * @param {number} deltaTime\n   * @param {number} speed\n   */\n  updateClouds(deltaTime, speed) {\n    const elSpeed = (this.cloudSpeed / 1000) * deltaTime * speed;\n    this.updateBackgroundEl(\n      elSpeed,\n      this.clouds,\n      this.config.MAX_CLOUDS,\n      this.addCloud.bind(this),\n      this.cloudFrequency\n    );\n\n    // Remove expired elements.\n    this.clouds = this.clouds.filter((obj) => !obj.remove);\n  },\n\n  /**\n   * Update the background element positions.\n   * @param {number} deltaTime\n   * @param {number} speed\n   */\n  updateBackgroundEls(deltaTime, speed) {\n    this.updateBackgroundEl(\n      deltaTime,\n      this.backgroundEls,\n      BackgroundEl.config.MAX_BG_ELS,\n      this.addBackgroundEl.bind(this),\n      this.cloudFrequency\n    );\n\n    // Remove expired elements.\n    this.backgroundEls = this.backgroundEls.filter((obj) => !obj.remove);\n  },\n\n  /**\n   * Update the obstacle positions.\n   * @param {number} deltaTime\n   * @param {number} currentSpeed\n   */\n  updateObstacles(deltaTime, currentSpeed) {\n    const updatedObstacles = this.obstacles.slice(0);\n\n    for (let i = 0; i < this.obstacles.length; i++) {\n      const obstacle = this.obstacles[i];\n      obstacle.update(deltaTime, currentSpeed);\n\n      // Clean up existing obstacles.\n      if (obstacle.remove) {\n        updatedObstacles.shift();\n      }\n    }\n    this.obstacles = updatedObstacles;\n\n    if (this.obstacles.length > 0) {\n      const lastObstacle = this.obstacles[this.obstacles.length - 1];\n\n      if (\n        lastObstacle &&\n        !lastObstacle.followingObstacleCreated &&\n        lastObstacle.isVisible() &&\n        lastObstacle.xPos + lastObstacle.width + lastObstacle.gap < this.dimensions.WIDTH\n      ) {\n        this.addNewObstacle(currentSpeed);\n        lastObstacle.followingObstacleCreated = true;\n      }\n    } else {\n      // Create new obstacles.\n      this.addNewObstacle(currentSpeed);\n    }\n  },\n\n  removeFirstObstacle() {\n    this.obstacles.shift();\n  },\n\n  /**\n   * Add a new obstacle.\n   * @param {number} currentSpeed\n   */\n  addNewObstacle(currentSpeed) {\n    const obstacleCount =\n      (Runner.isAltGameModeEnabled() && !this.altGameModeActive) || this.altGameModeActive\n        ? Obstacle.types.length - 1\n        : Obstacle.types.length - 2;\n    const obstacleTypeIndex = obstacleCount > 0 ? getRandomNum(0, obstacleCount) : 0;\n    const obstacleType = Obstacle.types[obstacleTypeIndex];\n\n    // Check for multiples of the same type of obstacle.\n    // Also check obstacle is available at current speed.\n    if (\n      (obstacleCount > 0 && this.duplicateObstacleCheck(obstacleType.type)) ||\n      currentSpeed < obstacleType.minSpeed\n    ) {\n      this.addNewObstacle(currentSpeed);\n    } else {\n      const obstacleSpritePos = this.spritePos[obstacleType.type];\n\n      this.obstacles.push(\n        new Obstacle(\n          this.canvasCtx,\n          obstacleType,\n          obstacleSpritePos,\n          this.dimensions,\n          this.gapCoefficient,\n          currentSpeed,\n          obstacleType.width,\n          this.altGameModeActive\n        )\n      );\n\n      this.obstacleHistory.unshift(obstacleType.type);\n\n      if (this.obstacleHistory.length > 1) {\n        this.obstacleHistory.splice(Runner.config.MAX_OBSTACLE_DUPLICATION);\n      }\n    }\n  },\n\n  /**\n   * Returns whether the previous two obstacles are the same as the next one.\n   * Maximum duplication is set in config value MAX_OBSTACLE_DUPLICATION.\n   * @return {boolean}\n   */\n  duplicateObstacleCheck(nextObstacleType) {\n    let duplicateCount = 0;\n\n    for (let i = 0; i < this.obstacleHistory.length; i++) {\n      duplicateCount = this.obstacleHistory[i] === nextObstacleType ? duplicateCount + 1 : 0;\n    }\n    return duplicateCount >= Runner.config.MAX_OBSTACLE_DUPLICATION;\n  },\n\n  /**\n   * Reset the horizon layer.\n   * Remove existing obstacles and reposition the horizon line.\n   */\n  reset() {\n    this.obstacles = [];\n    for (let l = 0; l < this.horizonLines.length; l++) {\n      this.horizonLines[l].reset();\n    }\n\n    this.nightMode.reset();\n  },\n\n  /**\n   * Update the canvas width and scaling.\n   * @param {number} width Canvas width.\n   * @param {number} height Canvas height.\n   */\n  resize(width, height) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n  },\n\n  /**\n   * Add a new cloud to the horizon.\n   */\n  addCloud() {\n    this.clouds.push(new Cloud(this.canvas, this.spritePos.CLOUD, this.dimensions.WIDTH));\n  },\n\n  /**\n   * Add a random background element to the horizon.\n   */\n  addBackgroundEl() {\n    const backgroundElTypes = Object.keys(Runner.spriteDefinition.BACKGROUND_EL);\n\n    if (backgroundElTypes.length > 0) {\n      let index = getRandomNum(0, backgroundElTypes.length - 1);\n      let type = backgroundElTypes[index];\n\n      // Add variation if available.\n      while (type == this.lastEl && backgroundElTypes.length > 1) {\n        index = getRandomNum(0, backgroundElTypes.length - 1);\n        type = backgroundElTypes[index];\n      }\n\n      this.lastEl = type;\n      this.backgroundEls.push(\n        new BackgroundEl(this.canvas, this.spritePos.BACKGROUND_EL, this.dimensions.WIDTH, type)\n      );\n    }\n  },\n};\n"],"names":["Runner","outerContainerId","opt_config","instance_","this","outerContainerEl","document","querySelector","containerEl","snackbarEl","touchController","config","Object","assign","normalConfig","dimensions","defaultDimensions","gameType","spriteDefinition","spriteDefinitionByType","altGameImageSprite","altGameModeActive","altGameModeFlashTimer","fadeInTimer","canvas","canvasCtx","tRex","distanceMeter","distanceRan","highestScore","syncHighestScore","time","runningTime","msPerFrame","FPS","currentSpeed","SPEED","slowDown","obstacles","activated","playing","crashed","paused","inverted","invertTimer","resizeTimerId_","playCount","audioBuffer","soundFx","generatedSoundFx","audioContext","images","imagesLoaded","pollingGamepads","gamepadIndex","undefined","previousGamepad","isDisabled","setupDisabledRunner","isAltGameModeEnabled","initAltGameType","loadImages","window","initializeHighScore","bind","DEFAULT_WIDTH","IS_HIDPI","devicePixelRatio","IS_IOS","test","navigator","userAgent","IS_MOBILE","IS_RTL","dir","ARCADE_MODE_URL","RESOURCE_POSTFIX","A11Y_STRINGS","ariaLabel","description","gameOver","highScore","jump","started","speedLabel","GeneratedSoundFx","audioCues","context","panner","speakPhrase","phrase","msg","SpeechSynthesisUtterance","speechSynthesis","getVoices","text","speak","announcePhrase","a11yStatusEl","textContent","getA11yString","stringName","loadTimeData","valueExists","getString","getRandomNum","min","max","Math","floor","random","vibrate","duration","createCanvas","container","width","height","opt_classname","createElement","className","classes","CANVAS","appendChild","decodeBase64ToArrayBuffer","base64String","len","length","str","atob","arrayBuffer","ArrayBuffer","bytes","Uint8Array","i","charCodeAt","buffer","getTimeStamp","Date","getTime","performance","now","GameOverPanel","textImgPos","restartImgPos","opt_altGameEndImgPos","opt_altGameActive","getContext","canvasDimensions","altGameEndImgPos","frameTimeStamp","animTimer","currentFrame","gameOverRafId","flashTimer","flashCounter","originalText","checkForCollision","obstacle","opt_canvasCtx","WIDTH","xPos","tRexBox","CollisionBox","yPos","HEIGHT","obstacleBox","typeConfig","size","drawCollisionBoxes","boxCompare","collisionBoxes","tRexCollisionBoxes","TREX","COLLISION_BOXES","ducking","Trex","DUCKING","RUNNING","t","adjTrexBox","createAdjustedCollisionBox","adjObstacleBox","box","adjustment","x","y","save","strokeStyle","strokeRect","restore","obstacleBoxX","w","h","Obstacle","type","spriteImgPos","gapCoefficient","speed","opt_xOffset","opt_isAltGameMode","spritePos","MAX_OBSTACLE_LENGTH","remove","gap","speedOffset","imageSprite","altCommonImageSprite","timer","init","xInitialPos","groundYPos","currentAnimFrames","blinkDelay","blinkCount","animStartTime","normalJumpConfig","status","WAITING","jumping","jumpVelocity","reachedMinHeight","speedDrop","jumpCount","jumpspotX","altGameModeEnabled","flashing","DistanceMeter","canvasWidth","image","currentDistance","maxScore","digits","achievement","defaultString","flashIterations","invertTrigger","flashingRafId","highScoreBounds","highScoreFlashing","maxScoreUnits","MAX_DISTANCE_UNITS","Cloud","containerWidth","MIN_CLOUD_GAP","MAX_CLOUD_GAP","BackgroundEl","MIN_GAP","MAX_GAP","switchFrames","spriteConfig","NightMode","currentPhase","opacity","stars","drawStars","placeStars","HorizonLine","lineConfig","sourceX","SOURCE_X","sourceY","SOURCE_Y","sourceDimensions","sourceXPos","bumpThreshold","setSourceDimensions","draw","Horizon","obstacleHistory","horizonOffsets","cloudFrequency","CLOUD_FREQUENCY","nightMode","clouds","cloudSpeed","BG_CLOUD_SPEED","backgroundEls","lastEl","backgroundSpeed","horizonLine","horizonLines","AUDIOCUE_PROXIMITY_THRESHOLD","AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y","BOTTOM_PAD","CANVAS_IN_VIEW_OFFSET","CLEAR_TIME","FADE_DURATION","FLASH_DURATION","GAMEOVER_CLEAR_TIME","INITIAL_JUMP_VELOCITY","INVERT_FADE_DURATION","MAX_BLINK_COUNT","MAX_CLOUDS","MAX_OBSTACLE_DUPLICATION","RESOURCE_TEMPLATE_ID","SPEED_DROP_COEFFICIENT","ARCADE_MODE_INITIAL_TOP_POSITION","ARCADE_MODE_TOP_POSITION_PERCENT","ACCELERATION","GAP_COEFFICIENT","INVERT_DISTANCE","MAX_SPEED","MOBILE_SPEED_COEFFICIENT","slowConfig","ARCADE_MODE","CONTAINER","CRASHED","ICON","INVERTED","SNACKBAR","SNACKBAR_SHOW","TOUCH_CONTROLLER","sounds","BUTTON_PRESS","HIT","SCORE","keycodes","JUMP","DUCK","RESTART","events","ANIM_END","CLICK","KEYDOWN","KEYUP","POINTERDOWN","POINTERUP","RESIZE","TOUCHEND","TOUCHSTART","VISIBILITY","BLUR","FOCUS","LOAD","GAMEPADCONNECTED","prototype","GAME_TYPE","parseInt","getValue","addEventListener","e","keyCode","classList","add","updateConfigSetting","setting","value","setJumpVelocity","setSpeed","createImageElement","resourceName","imgSrc","el","id","src","getElementById","scale","spriteDef","LDPI","HDPI","origImageSprite","complete","loadSounds","AudioContext","resourceTemplate","content","sound","soundSrc","substr","indexOf","decodeAudioData","index","audioData","opt_speed","mobileSpeed","style","visibility","adjustDimensions","setAttribute","slowSpeedCheckboxLabel","slowSpeedCheckbox","slowSpeedToggleEl","fillStyle","fill","updateCanvasScaling","horizon","TEXT_SPRITE","startListening","update","debounceResize","darkModeMediaQuery","matchMedia","isDarkMode","matches","addListener","createTouchController","setInterval","clearInterval","boxStyles","getComputedStyle","padding","Number","paddingLeft","offsetWidth","isArcadeMode","setArcadeModeContainerScale","calcXPos","clearCanvas","ceil","stop","gameOverPanel","updateDimensions","playIntro","restart","playingIntro","keyframes","styleSheets","insertRule","startGame","webkitAnimation","setPlayStatus","setArcadeMode","toggleSpeed","background","onVisibilityChange","clearRect","isCanvasInView","getBoundingClientRect","top","enableAltGameMode","updatePending","deltaTime","setFlashing","globalAlpha","updateJump","hasObstacles","showNightMode","collision","jumpObstacle","jumpAlerted","threshold","isMobileMouseInput","adjProximityThreshold","log10","removeFirstObstacle","collect","playAchievementSound","playSound","invert","actualDistance","getActualDistance","scheduleNextUpdate","handleEvent","evtType","onKeyDown","onKeyUp","onGamepadConnected","handleCanvasKeyPress","preventScrolling","preventDefault","checked","updatedConfig","enableSlowConfig","adjustObstacleSpeed","disableSpeedToggle","showSpeedToggle","isFocusEvent","toggle","HIDDEN_CLASS","disable","removeAttribute","stopListening","removeEventListener","target","pointerType","activeElement","errorPageController","trackEasterEgg","cancelFootSteps","startJump","setSpeedDrop","setDuck","String","isjumpKey","isRunning","endJump","isLeftClickOnCanvas","handleGameOverClicks","reset","play","pollGamepadState","gamepads","getGamepads","pollActiveGamepad","requestAnimationFrame","pollForActiveGamepad","buttons","pressed","gamepad","pollGamepadButton","buttonIndex","state","previousState","KeyboardEvent","dispatchEvent","hasClickedOnHighScore","isHighScoreFlashing","saveHighScore","resetHighScore","startHighScoreFlashing","cancelHighScoreFlashing","button","raqId","updateEasterEggHighScore","setHighScore","opt_resetScore","resetEasterEggHighScore","origSpriteDef","original","ALT_GAME_END","stopAll","replace","toString","cancelAnimationFrame","isPlaying","title","body","windowHeight","innerHeight","scaleHeight","scaleWidth","innerWidth","scaledCanvasHeight","translateY","cssScale","transform","hidden","webkitHidden","visibilityState","soundBuffer","sourceNode","createBufferSource","connect","destination","start","htmlEl","firstElementChild","opt_width","opt_height","backingStoreRatio","webkitBackingStorePixelRatio","ratio","oldWidth","oldHeight","webkitAudioContext","onstatechange","resume","createStereoPanner","playNote","frequency","startTime","opt_vol","opt_pan","osc1","createOscillator","osc2","volume","createGain","gain","pan","setValueAtTime","linearRampToValueAtTime","currentTime","loopFootSteps","bgSoundIntervalId","RESTART_ANIM_DURATION","LOGO_PAUSE_DURATION","FLASH_ITERATIONS","animConfig","frames","TEXT_X","TEXT_Y","TEXT_WIDTH","TEXT_HEIGHT","RESTART_WIDTH","RESTART_HEIGHT","drawGameOverText","opt_useAltText","centerX","textSourceX","textSourceY","textSourceWidth","textSourceHeight","textTargetX","round","textTargetY","textTargetWidth","textTargetHeight","spriteSource","translate","drawImage","drawAltGameElements","ALT_GAME_END_CONFIG","altGameEndConfig","altGameEndSourceWidth","altGameEndSourceHeight","altGameEndTargetX","X_OFFSET","altGameEndTargetY","Y_OFFSET","drawRestartButton","framePosX","restartSourceWidth","restartSourceHeight","restartTargetX","restartTargetY","opt_altGameModeActive","opt_tRex","ALT_GAME_OVER_TEXT_CONFIG","altTextConfig","clearGameOverTextBounds","MAX_GAP_COEFFICIENT","cloneCollisionBoxes","multipleSpeed","Array","isArray","yPosConfig","yPosMobile","getGap","sourceWidth","sourceHeight","numFrames","frameRate","isVisible","minGap","DROP_VELOCITY","FLASH_OFF","FLASH_ON","HEIGHT_DUCK","INTRO_DURATION","SPRITE_WIDTH","START_X_POS","WIDTH_DUCK","slowJumpConfig","GRAVITY","MAX_JUMP_HEIGHT","MIN_JUMP_HEIGHT","JUMPING","BLINK_TIMING","animFrames","minJumpHeight","jumpConfig","adjustAltGameConfigForSlowSpeed","RUNNING_1","RUNNING_2","WIDTH_JUMP","INVERT_JUMP","opt_gravityValue","opt_status","setBlinkDelay","blink","outputHeight","jumpOffset","xOffset","framesElapsed","isDucking","midair","DEST_WIDTH","ACHIEVEMENT_DISTANCE","COEFFICIENT","HIGH_SCORE_HIT_AREA_PADDING","maxDistanceStr","digitPos","opt_highScore","targetX","targetY","targetWidth","targetHeight","highScoreX","distance","paint","distanceStr","split","drawHighScore","highScoreStr","concat","touches","canvasBounds","clientX","left","clientY","offsetX","offsetY","getHighScoreBounds","flashHighScore","clearHighScoreBounds","rect","MAX_SKY_LEVEL","MIN_SKY_LEVEL","outputWidth","MAX_BG_ELS","POS","Y_POS","MS_PER_FRAME","BACKGROUND_EL","FIXED","FIXED_X_POS","OFFSET","X_POS","FIXED_Y_POS_1","FIXED_Y_POS_2","FADE_SPEED","MOON_SPEED","NUM_STARS","STAR_SIZE","STAR_SPEED","STAR_MAX_Y","phases","updateXPos","currentPos","moonSourceWidth","moonSourceHeight","moonSourceX","moonOutputWidth","starSize","starSourceX","STAR","segmentSize","YPOS","newDimensions","dimension","getRandomType","pos","increment","line1","line2","BUMPY_THRESHOLD","HORIZON_HEIGHT","types","OBSTACLES","addCloud","LINES","push","MOON","minSpeed","BACKGROUND_EL_CONFIG","updateObstacles","updateBackgroundEls","HAS_CLOUDS","updateClouds","updateBackgroundEl","elSpeed","bgElArray","maxBgEl","bgElAddFunction","numElements","filter","obj","addBackgroundEl","updatedObstacles","slice","shift","lastObstacle","followingObstacleCreated","addNewObstacle","obstacleCount","obstacleTypeIndex","obstacleType","duplicateObstacleCheck","obstacleSpritePos","unshift","splice","nextObstacleType","duplicateCount","l","resize","CLOUD","backgroundElTypes","keys"],"version":3,"file":"index.7af7bca1.js.map"}