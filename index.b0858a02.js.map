{"mappings":"AAyBO,IAAIA,EA+KR,SACMC,EAAOC,EAAWC,GACzB,IAAKD,EACH,MAAM,IAAIE,MAAM,2BAA6BC,SAASC,SAASC,KAAO,KAAOJ,GAS9E,SACMK,EAAaC,EAAIC,EAAOC,GAC/BV,SAAcS,IAAUC,EAAM,IAAMD,EAAQ,MAAQD,EAAK,cAAgBE,GAG3EV,GAAQD,EAAc,sCACtBA,EAAe,wBA5LXY,KAAKC,MAAQ,KAYXC,SAAKJ,GACPT,GAAQW,KAAKC,MAAO,oBACpBD,KAAKC,MAAQH,EAOfK,YAAYN,GACV,OAAOA,KAAMG,KAAKC,MAQpBG,SAASP,GACPR,EAAOW,KAAKC,MAAO,oDACnB,MAAMH,EAAQE,KAAKC,MAAMJ,GAEzB,OADAR,OAAwB,IAAVS,EAAuB,4BAA8BD,GAC5DC,EAQTO,UAAUR,GACR,MAAMC,EAAQE,KAAKI,SAASP,GAE5B,OADAD,EAAaC,EAAIC,EAAO,UACMA,EAWhCQ,WAAWT,EAAIU,GACb,MAAMT,EAAQE,KAAKK,UAAUR,GAC7B,IAAKC,EACH,MAAO,GAGT,MAAMU,EAAOC,MAAMC,UAAUC,MAAMC,KAAKC,WAExC,OADAL,EAAK,GAAKV,EACHE,KAAKc,iBAAiBC,MAAMf,KAAMQ,GAa3CM,iBAAiBE,EAAOT,GACtB,MAAMU,EAAUJ,UAChB,OAAOG,EAAME,QAAO,eAAgB,SAAUC,GAE5C,OADA9B,EAAO8B,EAAEC,MAAK,YAAc,0CACf,OAAND,EAAa,IAAMF,EAAQE,EAAE,OAexCE,2BAA2BL,EAAOT,GAChC,MAAMU,EAAUJ,UAehB,OAZgBG,EAAMI,MAAK,sCAAyC,IAAIE,KAAI,SAAUC,GAGpF,OAAKA,EAAEH,MAAK,aAML,CAAEtB,MAAOmB,EAAQM,EAAE,IAAKC,IAAKD,IALlClC,GAAQkC,EAAEH,MAAK,QAAW,IAAIK,OAAS,GAAM,EAAG,0CACzC,CAAE3B,MAAOyB,EAAEL,QAAO,QAAU,KAAMM,IAAK,UAepDE,WAAW7B,GACT,MAAMC,EAAQE,KAAKI,SAASP,GAE5B,OADAD,EAAaC,EAAIC,EAAO,WACOA,EAQjC6B,WAAW9B,GACT,MAAMC,EAAQE,KAAKI,SAASP,GAG5B,OAFAD,EAAaC,EAAIC,EAAO,UACxBT,EAAOS,IAAU8B,KAAKC,MAAM/B,GAAQ,yBAA2BA,GACjCA,EAOhCgC,eAAeC,GACb1C,EAA+B,iBAAjB0C,EAA2B,6CACzC,IAAK,MAAMC,KAAOD,EAChB/B,KAAKC,MAAM+B,GAAOD,EAAaC,GASnCC,gBAAgBC,EAAU,MACxBlC,KAAKC,MAAQiC,EAMfC,gBACE,OAAsB,OAAfnC,KAAKC,QA+BhBmC,OAAOC,aAAejD,EA2BtBA,EAAac,KAtBe,CAC1BoC,sBAAuB,kBACvBC,wBACE,wKACFC,qBAAsB,+BACtBC,sBAAuB,4BACvBC,iBAAkB,QAClBC,wBAAyB,eACzBC,sBAAuB,gBACvBC,UAAW,GACXC,WAAY,4BACZC,SAAU,MACVC,QAAS,CACPC,SAAU,OACVC,IAAK,uBAEPC,UAAW,eACXC,SAAU,KACVC,cAAe,MACfC,MAAO","sources":["src/load_time_data.m.js"],"sourcesContent":["// https://source.chromium.org/chromium/chromium/src/+/main:ui/webui/resources/js/load_time_data.m.js\n\n// Copyright (c) 2012 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// import test from './sounds/button-press.mp3';\n// document\n//   .getElementById('audio-resources')\n//   .content.getElementById('offline-sound-press').src = test;\n\n/**\n * @fileoverview This file defines a singleton which provides access to all data\n * that is available as soon as the page's resources are loaded (before DOM\n * content has finished loading). This data includes both localized strings and\n * any data that is important to have ready from a very early stage (e.g. things\n * that must be displayed right away).\n *\n * Note that loadTimeData is not guaranteed to be consistent between page\n * refreshes (https://crbug.com/740629) and should not contain values that might\n * change if the page is re-opened later.\n */\n\n/** @type {!LoadTimeData} */\n// eslint-disable-next-line no-var\nexport var loadTimeData;\n\nclass LoadTimeData {\n  constructor() {\n    /** @type {?Object} */\n    this.data_ = null;\n  }\n\n  /**\n   * Sets the backing object.\n   *\n   * Note that there is no getter for |data_| to discourage abuse of the form:\n   *\n   *     var value = loadTimeData.data()['key'];\n   *\n   * @param {Object} value The de-serialized page data.\n   */\n  set data(value) {\n    expect(!this.data_, 'Re-setting data.');\n    this.data_ = value;\n  }\n\n  /**\n   * @param {string} id An ID of a value that might exist.\n   * @return {boolean} True if |id| is a key in the dictionary.\n   */\n  valueExists(id) {\n    return id in this.data_;\n  }\n\n  /**\n   * Fetches a value, expecting that it exists.\n   * @param {string} id The key that identifies the desired value.\n   * @return {*} The corresponding value.\n   */\n  getValue(id) {\n    expect(this.data_, 'No data. Did you remember to include strings.js?');\n    const value = this.data_[id];\n    expect(typeof value !== 'undefined', 'Could not find value for ' + id);\n    return value;\n  }\n\n  /**\n   * As above, but also makes sure that the value is a string.\n   * @param {string} id The key that identifies the desired string.\n   * @return {string} The corresponding string value.\n   */\n  getString(id) {\n    const value = this.getValue(id);\n    expectIsType(id, value, 'string');\n    return /** @type {string} */ (value);\n  }\n\n  /**\n   * Returns a formatted localized string where $1 to $9 are replaced by the\n   * second to the tenth argument.\n   * @param {string} id The ID of the string we want.\n   * @param {...(string|number)} var_args The extra values to include in the\n   *     formatted output.\n   * @return {string} The formatted string.\n   */\n  getStringF(id, var_args) {\n    const value = this.getString(id);\n    if (!value) {\n      return '';\n    }\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = value;\n    return this.substituteString.apply(this, args);\n  }\n\n  /**\n   * Returns a formatted localized string where $1 to $9 are replaced by the\n   * second to the tenth argument. Any standalone $ signs must be escaped as\n   * $$.\n   * @param {string} label The label to substitute through.\n   *     This is not an resource ID.\n   * @param {...(string|number)} var_args The extra values to include in the\n   *     formatted output.\n   * @return {string} The formatted string.\n   */\n  substituteString(label, var_args) {\n    const varArgs = arguments;\n    return label.replace(/\\$(.|$|\\n)/g, function (m) {\n      expect(m.match(/\\$[$1-9]/), 'Unescaped $ found in localized string.');\n      return m === '$$' ? '$' : varArgs[m[1]];\n    });\n  }\n\n  /**\n   * Returns a formatted string where $1 to $9 are replaced by the second to\n   * tenth argument, split apart into a list of pieces describing how the\n   * substitution was performed. Any standalone $ signs must be escaped as $$.\n   * @param {string} label A localized string to substitute through.\n   *     This is not an resource ID.\n   * @param {...(string|number)} var_args The extra values to include in the\n   *     formatted output.\n   * @return {!Array<!{value: string, arg: (null|string)}>} The formatted\n   *     string pieces.\n   */\n  getSubstitutedStringPieces(label, var_args) {\n    const varArgs = arguments;\n    // Split the string by separately matching all occurrences of $1-9 and of\n    // non $1-9 pieces.\n    const pieces = (label.match(/(\\$[1-9])|(([^$]|\\$([^1-9]|$))+)/g) || []).map(function (p) {\n      // Pieces that are not $1-9 should be returned after replacing $$\n      // with $.\n      if (!p.match(/^\\$[1-9]$/)) {\n        expect((p.match(/\\$/g) || []).length % 2 === 0, 'Unescaped $ found in localized string.');\n        return { value: p.replace(/\\$\\$/g, '$'), arg: null };\n      }\n\n      // Otherwise, return the substitution value.\n      return { value: varArgs[p[1]], arg: p };\n    });\n\n    return pieces;\n  }\n\n  /**\n   * As above, but also makes sure that the value is a boolean.\n   * @param {string} id The key that identifies the desired boolean.\n   * @return {boolean} The corresponding boolean value.\n   */\n  getBoolean(id) {\n    const value = this.getValue(id);\n    expectIsType(id, value, 'boolean');\n    return /** @type {boolean} */ (value);\n  }\n\n  /**\n   * As above, but also makes sure that the value is an integer.\n   * @param {string} id The key that identifies the desired number.\n   * @return {number} The corresponding number value.\n   */\n  getInteger(id) {\n    const value = this.getValue(id);\n    expectIsType(id, value, 'number');\n    expect(value === Math.floor(value), \"Number isn't integer: \" + value);\n    return /** @type {number} */ (value);\n  }\n\n  /**\n   * Override values in loadTimeData with the values found in |replacements|.\n   * @param {Object} replacements The dictionary object of keys to replace.\n   */\n  overrideValues(replacements) {\n    expect(typeof replacements === 'object', 'Replacements must be a dictionary object.');\n    for (const key in replacements) {\n      this.data_[key] = replacements[key];\n    }\n  }\n\n  /**\n   * Reset loadTimeData's data. Should only be used in tests.\n   * @param {?Object} newData The data to restore to, when null restores to\n   *    unset state.\n   */\n  resetForTesting(newData = null) {\n    this.data_ = newData;\n  }\n\n  /**\n   * @return {boolean} Whether loadTimeData.data has been set.\n   */\n  isInitialized() {\n    return this.data_ !== null;\n  }\n}\n\n/**\n * Checks condition, throws error message if expectation fails.\n * @param {*} condition The condition to check for truthiness.\n * @param {string} message The message to display if the check fails.\n */\nfunction expect(condition, message) {\n  if (!condition) {\n    throw new Error('Unexpected condition on ' + document.location.href + ': ' + message);\n  }\n}\n\n/**\n * Checks that the given value has the given type.\n * @param {string} id The id of the value (only used for error message).\n * @param {*} value The value to check the type on.\n * @param {string} type The type we expect |value| to be.\n */\nfunction expectIsType(id, value, type) {\n  expect(typeof value === type, '[' + value + '] (' + id + ') is not a ' + type);\n}\n\nexpect(!loadTimeData, 'should only include this file once');\nloadTimeData = new LoadTimeData();\n\n// Expose |loadTimeData| directly on |window|, since within a JS module the\n// scope is local and not all files have been updated to import the exported\n// |loadTimeData| explicitly.\nwindow.loadTimeData = loadTimeData;\n\n// copied directly from chrome://dino\n// source can be found in https://source.chromium.org/chromium/chromium/src/+/main:components/error_page_strings.grdp\n// TODO: l10n https://source.chromium.org/chromium/chromium/src/+/main:components/strings/components_strings_zh-TW.xtb\nconst defaultLoadTimeData = {\n  dinoGameA11yAriaLabel: 'Dino game, play',\n  dinoGameA11yDescription:\n    'Dino game. A pixelated dinosaur dodges cacti and pterodactyls as it runs across a desolate landscape. When you hear an audio cue, press space to jump over obstacles.',\n  dinoGameA11yGameOver: 'Game over, your score is $1.',\n  dinoGameA11yHighScore: 'Your highest score is $1.',\n  dinoGameA11yJump: 'Jump!',\n  dinoGameA11ySpeedToggle: 'Start slower',\n  dinoGameA11yStartGame: 'Game started.',\n  errorCode: '',\n  fontfamily: '\"sans\", Arial, sans-serif',\n  fontsize: '75%',\n  heading: {\n    hostName: 'dino',\n    msg: 'Press space to play',\n  },\n  iconClass: 'icon-offline',\n  language: 'en',\n  textdirection: 'ltr',\n  title: 'chrome://dino/',\n};\n\nloadTimeData.data = defaultLoadTimeData;\n"],"names":["$f0671a096bb63b80$export$25f99c59898df4ac","$f0671a096bb63b80$var$expect","condition","message","Error","document","location","href","$f0671a096bb63b80$var$expectIsType","id","value","type","this","data_","data","valueExists","getValue","getString","getStringF","var_args","args","Array","prototype","slice","call","arguments","substituteString","apply","label","varArgs","replace","m","match","getSubstitutedStringPieces","map","p","arg","length","getBoolean","getInteger","Math","floor","overrideValues","replacements","key","resetForTesting","newData","isInitialized","window","loadTimeData","dinoGameA11yAriaLabel","dinoGameA11yDescription","dinoGameA11yGameOver","dinoGameA11yHighScore","dinoGameA11yJump","dinoGameA11ySpeedToggle","dinoGameA11yStartGame","errorCode","fontfamily","fontsize","heading","hostName","msg","iconClass","language","textdirection","title"],"version":3,"file":"index.b0858a02.js.map"}